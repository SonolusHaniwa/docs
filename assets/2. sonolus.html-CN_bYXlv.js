import{_ as o,c as n,e as a,o as t}from"./app-DOik5NaU.js";const c={};function s(d,e){return t(),n("div",null,e[0]||(e[0]=[a('<h1 id="sonolus-基础" tabindex="-1"><a class="header-anchor" href="#sonolus-基础"><span>Sonolus 基础</span></a></h1><h2 id="原型与实体" tabindex="-1"><a class="header-anchor" href="#原型与实体"><span>原型与实体</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>本段内容不适用于教程模式。</p></div><p>原型是一种实体的抽象概念，由引擎数据定义。在 Sonolus.h 中，您需要使用 <code>Archetype</code> 类的继承类来定义一种原型。</p><p>实体是一种原型的示例，由关卡数据定义。在 Sonolus.h 中，您可以通过 <code>LevelData.h</code> 中的 API 简易地生成包含多个实体的关卡数据。</p><p>在关卡初始化阶段，Sonolus 会遍历关卡数据中的实体。对于每个实体，会根据其指定的原型名生成对应原型的示例。</p><p>单个原型是由多个回调函数及其对应的调用顺序构成的，具体调用细节视游玩模式不同而不同。一般来说，在关卡初始化阶段，会调用每个实体的 <code>preprocess</code> 或其他回调函数，随后在游戏进行时的每一帧，会以特定的顺序与时机调用剩余回调函数。</p><p>回调函数调用顺序(<code>*Order</code>)是一个编译期常量，不可在引擎运行过程中修改。它决定了该回调函数在不同原型中的调用顺序。该值越小，意味着该原型中的该回调函数在同一执行周期中会更早执行，反之会更晚执行。</p><h2 id="游戏帧-更新周期" tabindex="-1"><a class="header-anchor" href="#游戏帧-更新周期"><span>游戏帧/更新周期</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>本段内容不适用于预览模式。</p></div><p>Sonolus 将每一帧作为一个更新周期。在该更新周期中，会以特定顺序彻底调用一遍未在初始化过程执行的回调函数。</p><p>开发者在每一更新周期<strong>都需要</strong>调用 <code>Draw</code> 函数绘制相关精灵，否则该更新周期绘制的精灵将在下一更新周期被清除。</p><p>开发者<strong>不需要</strong>在每一更新周期都调用 <code>Play</code>/<code>SpawnEffect</code> 函数播放音效和特效，只需要在合适的时机调用一次即可，Sonolus 不会清除上一更新周期播放的音效和特效。</p><h2 id="数据存储" tabindex="-1"><a class="header-anchor" href="#数据存储"><span>数据存储</span></a></h2><p>在 Sonolus.h 中，数据均存储在多个由一段简单的连续内存组成的区块内。</p><p>一般来说，所有回调函数具有对所有区块的读取权限，但只有部分回调函数具有对部分区块的写入权限。</p><p>通过 Sonolus.h 提供的低级函数，您可以简单地访问这些内存块。例如您可以通过 <code>Get(blockId, offset)</code> 函数获取 id 为 <code>blockId</code> 的区块上偏移为 <code>offset</code> 的变量，同时可以通过 <code>Set(blockId, offset, value)</code> 函数将 id 为 <code>blockId</code> 的区块上偏移为 <code>offset</code> 的变量设置为 <code>value</code>。</p><p>Sonolus.h 抽象化了这些低级操作并将其转化为了对开发者友好的 API。</p><p>部分区块的值可在游戏暂停时的菜单中查看(需要在设置中开启调试模式)。</p><p>针对于已激活实体的区块的值可在游戏暂停时的 <code>Active Entities</code> 中找到相关实体查看(需要在设置中开启调试模式)。</p><p>接下来将为您介绍常见的部分区块名及其作用。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>请注意各个区块的可见模式，在无另外提及的情况下默认为所有模式可见。</p></div><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在 Sonolus.h 中，您可以直接通过区块名来访问各区块数据，也可以通过区块名加上 <code>Id</code> 来获取区块 id。</p></div><h3 id="runtimeenvironment" tabindex="-1"><a class="header-anchor" href="#runtimeenvironment"><span><code>RuntimeEnvironment</code></span></a></h3><p>该区块包含了用户屏幕宽高比，音频偏移等运行时环境信息。</p><h3 id="runtimeupdate" tabindex="-1"><a class="header-anchor" href="#runtimeupdate"><span><code>RuntimeUpdate</code></span></a></h3><p>该区块包含了当前时间，缩放时间等当前更新周期的运行时信息。</p><p>该区块仅在<strong>游玩模式和观看模式</strong>下可见，其他模式不可见。</p><h3 id="runtimetoucharray" tabindex="-1"><a class="header-anchor" href="#runtimetoucharray"><span><code>RuntimeTouchArray</code></span></a></h3><p>该区块包含了当前帧的触摸(touch)信息以及触摸更新信息。</p><p>在 Sonolus.h 中，<code>touchCount</code> 全局变量代表触摸数量，<code>touches</code> 数组则包含所有触摸信息。<code>touches</code> 数组支持以 <code>int</code> 常量或 <code>var</code> 作为偏移量传入。</p><p>该区块仅在<strong>游玩模式</strong>下可见，其他模式不可见。</p><h3 id="runtimeui" tabindex="-1"><a class="header-anchor" href="#runtimeui"><span><code>RuntimeUI</code></span></a></h3><p>该区块包含了 Sonolus UI 组件信息，您需要通过手动修改该区块的值来控制 Sonolus UI 组件。</p><p>在 Sonolus.h 中，<code>ui</code> 全局变量包含了您可以控制的全部 Sonolus UI 组件。您可以简单地用 <code>setUI</code> 函数来修改单个 Sonolus UI 控件的属性值。</p><p>当然，您也可以通过在皮肤中导入组件图像，自行实现您自己的 UI 组件。但请在引擎配置中添加 <code>Enable Sonolus UI</code> 等相似选项，因为部分玩家更习惯使用 Sonolus UI 组件而非您的自定义 UI 组件。</p><h3 id="runtimeuiconfiguration" tabindex="-1"><a class="header-anchor" href="#runtimeuiconfiguration"><span><code>RuntimeUIConfiguration</code></span></a></h3><p>该区块包含了 Sonolus UI 组件的用户侧配置信息，您可以通过使用该区块的值来计算出 Sonolus UI 组件的属性值。</p><p>在 Sonolus.h 中，<code>configuration</code> 全局变量包含了所有 Sonolus UI 组件用户侧配置信息。</p><h3 id="levelmemory-tutorialmemory-previewdata" tabindex="-1"><a class="header-anchor" href="#levelmemory-tutorialmemory-previewdata"><span><code>LevelMemory</code>/<code>TutorialMemory</code>/<code>PreviewData</code></span></a></h3><p>该区块一般用于通用内存存储。</p><p>在 Sonolus.h 中，<code>var</code> 类型会自动分配该区块的内存，因此不推荐您自行分配该区块的内存。</p><h3 id="leveloption-previewoption" tabindex="-1"><a class="header-anchor" href="#leveloption-previewoption"><span><code>LevelOption</code>/<code>PreviewOption</code></span></a></h3><p>该区块包含了所有引擎选项值。</p><p>在 Sonolus.h 中，您可以通过 <code>ToggleOption</code>/<code>SelectOption</code>/<code>SliderOption</code> 来定义引擎选项供用户控制。关卡启动后所有选项的值将会自动写入到 <code>LevelOption</code> 区块。</p><p>该区块在<strong>教程模式</strong>下<strong>不可见</strong>，其他模式可见。</p><h3 id="levelbucket" tabindex="-1"><a class="header-anchor" href="#levelbucket"><span><code>LevelBucket</code></span></a></h3><p>该区块包含了所有已定义的桶信息，您需要通过手动修改该区块的值来控制桶的属性。</p><p>在 Sonolus.h 中，您可以简单地用 <code>setBucket</code> 函数来修改单个桶的属性值。</p><p>该区块仅在<strong>游玩模式和观看模式</strong>下可见，其他模式不可见。</p><h3 id="levelscore" tabindex="-1"><a class="header-anchor" href="#levelscore"><span><code>LevelScore</code></span></a></h3><p>该区块包含了所有原型在不同判定下的得分倍率，您需要通过手动修改该区块的值来控制原型在不同判定结果下的得分倍率。</p><p>在 Sonolus.h 中，您可以简单地用 <code>setScore</code> 函数来修改单个原型在不同判定下的得分倍率。</p><p>该区块仅在<strong>游玩模式和观看模式</strong>下可见，其他模式不可见。</p><h3 id="entitymemory" tabindex="-1"><a class="header-anchor" href="#entitymemory"><span><code>EntityMemory</code></span></a></h3><p>该区块一般用于实体内存存储。</p><p>在 Sonolus.h 中，<code>var</code> 类型会自动分配该区块的内存，因此不推荐您自行分配该区块的内存。</p><p>该区块仅在<strong>游玩模式和观看模式</strong>下可见，其他模式不可见。</p><h3 id="entitysharedmemory" tabindex="-1"><a class="header-anchor" href="#entitysharedmemory"><span><code>EntitySharedMemory</code></span></a></h3><p>该区块一般用于实体共享内存存储，其他实体可以读取该实体的共享内存。</p><p>在 Sonolus.h 中，您需要使用 <code>var a = var(EntitySharedMemoryId, 0);</code> 来手动分配该区块的内存。</p><p>该区块在<strong>教程模式</strong>下<strong>不可见</strong>，其他模式可见。</p><h3 id="entitydata" tabindex="-1"><a class="header-anchor" href="#entitydata"><span><code>EntityData</code></span></a></h3><p>该区块包含了该实体的实体数据。</p><p>在 Sonolus.h 中，您可以通过 <code>defineImport</code> 或 <code>defineImportDetailed</code> 来定义该原型将会包含的实体数据，Sonolus.h 会自动创建相应变量并自动分配 <code>EntityData</code> 区块内存，因此不推荐您自行分配该区块的内存。</p><p>该区块在<strong>教程模式</strong>下<strong>不可见</strong>，其他模式可见。</p><h3 id="entityinfo" tabindex="-1"><a class="header-anchor" href="#entityinfo"><span><code>EntityInfo</code></span></a></h3><p>该区块包含了该实体的详细信息，在所有回调函数中均不可修改。</p><p>在 Sonolus.h 中，您可以在原型内使用 <code>info</code> 全局变量来获取该实体的详细信息。</p><p>该区块在<strong>教程模式</strong>下<strong>不可见</strong>，其他模式可见。</p><h3 id="entitydespawn" tabindex="-1"><a class="header-anchor" href="#entitydespawn"><span><code>EntityDespawn</code></span></a></h3><p>该区块仅用于实体向 Sonolus 传递销毁信息。</p><p>在 Sonolus.h 中，您可以在原型内部分回调函数中使用 <code>despawn.despawn = true;</code> 来销毁该实体。</p><p>该区块仅在<strong>游玩模式</strong>下可见，其他模式不可见。</p><h3 id="entityinput" tabindex="-1"><a class="header-anchor" href="#entityinput"><span><code>EntityInput</code></span></a></h3><p>该区块仅用于实体向 Sonolus 传递判定信息。</p><p>在 Sonolus.h 中，您可以在原型内使用 <code>input</code> 全局变量来设置该实体的判定信息。</p><p>该区块仅在<strong>游玩模式和观看模式</strong>下可见，其他模式不可见。</p><h3 id="entitysharedmemoryarray" tabindex="-1"><a class="header-anchor" href="#entitysharedmemoryarray"><span><code>EntitySharedMemoryArray</code></span></a></h3><p>该区块包含了<strong>所有</strong>实体共享内存信息，您可以通过该区块来访问/修改其他实体的共享内存。</p><p>在 Sonolus.h 中，您可以通过 <code>EntitySharedMemoryArray[entityId].generic[offset]</code> 来访问/修改其他实体的共享内存。</p><p>该区块在<strong>教程模式</strong>下<strong>不可见</strong>，其他模式可见。</p><h3 id="entitydataarray" tabindex="-1"><a class="header-anchor" href="#entitydataarray"><span><code>EntityDataArray</code></span></a></h3><p>该区块包含了<strong>所有</strong>实体数据，您可以通过该区块来访问/修改其他实体的实体数据。</p><p>在 Sonolus.h 中，您可以通过 <code>EntityDataArray[entityId].generic[offset]</code> 来访问/修改其他实体的实体数据。</p><p>该区块在<strong>教程模式</strong>下<strong>不可见</strong>，其他模式可见。</p><h3 id="entityinfoarray" tabindex="-1"><a class="header-anchor" href="#entityinfoarray"><span><code>EntityInfoArray</code></span></a></h3><p>该区块包含了<strong>所有</strong>实体详细信息，在所有回调函数中均不可修改。</p><p>在 Sonolus.h 中，您可以通过 <code>EntityInfoArray[entityId]</code> 来访问其他实体的详细信息。</p><p>该区块在<strong>教程模式</strong>下<strong>不可见</strong>，其他模式可见。</p><h3 id="archetypelife" tabindex="-1"><a class="header-anchor" href="#archetypelife"><span><code>ArchetypeLife</code></span></a></h3><p>该区块包含了所有原型在不同判定下对 Sonolus 的生命值贡献，您需要通过手动修改该区块的值来控制原型在不同判定结果下对 Sonolus 的生命值贡献。</p><p>在 Sonolus.h 中，您可以在原型内使用 <code>life</code> 全局变量来设置该原型在不同判定结果下对 Sonolus 的生命值贡献。</p><p>该区块仅在<strong>游玩模式和观看模式</strong>下可见，其他模式不可见。</p><h3 id="temporarymemory" tabindex="-1"><a class="header-anchor" href="#temporarymemory"><span><code>TemporaryMemory</code></span></a></h3><p>该区块一般用于临时内存存储。</p><p>在 Sonolus.h 中，<code>var</code> 类型会自动分配该区块的内存，因此不推荐您自行分配该区块的内存。</p><h2 id="皮肤精灵-skin-sprite" tabindex="-1"><a class="header-anchor" href="#皮肤精灵-skin-sprite"><span>皮肤精灵(Skin Sprite)</span></a></h2><p>皮肤精灵本质上就是一张 png 图片，开发者可以使用 <code>Draw</code> 函数来将皮肤精灵绘制到 Sonolus 画面里。</p><p>在 Sonolus 中，<strong>任何模式</strong>均可以使用皮肤精灵来渲染画面。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在 Sonolus.h 中，您可以将精灵图片放置于 skins 文件夹下，然后使用 <code>defineSkinSprite(name)</code> 函数来导入精灵。默认情况下 Sonolus.h 会寻找 <code>/skins/{name}.png</code> 作为该精灵的 png 图片。</p><p>也可以不放置在 skins 文件夹下，此时需要使用 <code>defineSkinSprite(name, path)</code> 函数来导入精灵。</p><p><strong>只有被导入过的精灵才可以在 Sonolus 中被使用。</strong></p><p>在 <code>main</code> 函数中，通过调用 <code>PackSkin</code> 函数，Sonolus.h 会自动打包皮肤精灵并在 dist 目录下生成对应的 <code>SkinData</code> 和 <code>SkinTexture</code>。</p></div><h2 id="音效片段-effect-clip" tabindex="-1"><a class="header-anchor" href="#音效片段-effect-clip"><span>音效片段(Effect Clip)</span></a></h2><p>音效片段本质上是一段 mp3 音频，开发者可以在特定的时间调用 <code>Play</code> 或 <code>PlayScheduled</code> 函数以在 Sonolus 中播放音效。</p><p>在 Sonolus 中，<strong>除了预览模式</strong>，均可以使用音效片段来播放音效。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在 Sonolus.h 中，您可以将音效片段放置于 effects 文件夹下，然后使用 <code>defineEffectClip(name)</code> 函数来导入音效。默认情况下 Sonolus.h 会寻找 <code>/effects/{name}.mp3</code> 作为该音效的 mp3 片段。</p><p>也可以不放置在 effects 文件夹下，此时需要使用 <code>defineEffectClip(name, path)</code> 函数来导入音效。</p><p><strong>只有被导入过的音效才可以在 Sonolus 中被使用。</strong></p><p>在 <code>main</code> 函数中，通过调用 <code>PackEffect</code> 函数，Sonolus.h 会自动打包皮肤精灵并在 dist 目录下生成对应的 <code>EffectData</code> 和 <code>EffectAudio</code>。</p></div><h2 id="特效-particle-effect" tabindex="-1"><a class="header-anchor" href="#特效-particle-effect"><span>特效(Particle Effect)</span></a></h2><p>特效制作比较复杂，目前 <a href="https://studio.sonolus.com" target="_blank" rel="noopener noreferrer">Sonolus Studio</a> 提供了特效编辑器，您可以在该网站中制作您自己的特效，然后上传到您自己的 Sonolus Server 服务器中。</p><p>开发者可以在特定的时间调用 <code>SpawnParticleEffect</code> 函数以在 Sonolus 中播放特效。</p><p>在 Sonolus 中，<strong>除了预览模式</strong>，均可以使用特效来反馈用户输入。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在 Sonolus.h 中，您可以使用 <code>defineParticleEffect(name)</code> 函数来导入特效。</p><p>由于特效制作比较复杂，我们并不提供打包特效的方法。请使用 <a href="https://studio.sonolus.com" target="_blank" rel="noopener noreferrer">Sonolus Studio</a> 自行制作特效并上传到服务器中。</p><p><strong>只有被导入过的特效才可以在 Sonolus 中被使用。</strong></p></div><h2 id="桶-bucket" tabindex="-1"><a class="header-anchor" href="#桶-bucket"><span>桶(Bucket)</span></a></h2><p>在 Sonolus 中，一个桶中包含了多个计入 combo 的实体，且每个计入 combo 的实体能且仅能被装入一个桶中。</p><p>在结果页面，Sonolus 会列举出每个桶，并将该桶中所有计入 combo 的实体的判定结果绘制成一张图供玩家参考。</p><p>在 Sonolus 中，<strong>只有游玩模式和观看模式</strong>需要用到桶。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>在 Sonolus.h 中，您可以使用 <code>defineBucket</code> 函数来定义一个桶。</p><p>您还可以使用在原型中通过给 <code>input.bucketIndex</code> 赋值来指定桶，并通过给 <code>input.bucketValue</code> 赋值来指定该实体的判定结果。</p></div>',115)]))}const r=o(c,[["render",s]]),i=JSON.parse('{"path":"/sonolus.h/basic/2.%20sonolus.html","title":"Sonolus 基础","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1746345404000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"littleyang0531@cau.edu.cn","commits":4,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"e13903a7cea295433f4bca82cc81c410ec333e8c","time":1746345404000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"dcbb26ffce1c79b5898039889207b9a274cdab0b","time":1745767057000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"cf41bee41753afa07d0ab3cd62644a45489fffce","time":1745078694000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"3b1b3ba269e86d6d9e8b0d2a714f42d2326eb40c","time":1745073187000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h/basic/2. sonolus.md"}');export{r as comp,i as data};
