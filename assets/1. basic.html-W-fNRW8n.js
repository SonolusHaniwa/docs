import{_ as t,c as l,e as p,a,d as s,b as o,w as c,r as i,o as u}from"./app-DWWHx01N.js";const r={};function d(k,n){const e=i("RouteLink");return u(),l("div",null,[n[13]||(n[13]=p(`<h1 id="游玩模式基础" tabindex="-1"><a class="header-anchor" href="#游玩模式基础"><span>游玩模式基础</span></a></h1><p>在本章中，您将会学习到：</p><ul><li>游玩模式相关概念</li><li>原型回调函数</li><li>区块列表</li></ul><h2 id="相关概念" tabindex="-1"><a class="header-anchor" href="#相关概念"><span>相关概念</span></a></h2><p>游玩模式，顾名思义，就是可供玩家游玩的模式。</p><p>您可以使用以下指令来编译引擎的游玩模式:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">./sonolus buildcpp play <span class="token operator">&lt;</span>name<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="原型回调函数" tabindex="-1"><a class="header-anchor" href="#原型回调函数"><span>原型回调函数</span></a></h2><h3 id="原型定义" tabindex="-1"><a class="header-anchor" href="#原型定义"><span>原型定义</span></a></h3>`,9)),a("p",null,[n[1]||(n[1]=s("名为 ")),n[2]||(n[2]=a("code",null,"*Order",-1)),n[3]||(n[3]=s(" 的 ")),n[4]||(n[4]=a("code",null,"double",-1)),n[5]||(n[5]=s(" 型变量和返回值类型为 ")),n[6]||(n[6]=a("code",null,"SonolusApi",-1)),n[7]||(n[7]=s(" 的函数已在 ")),o(e,{to:"/sonolus.h/basic/2.%20sonolus.html"},{default:c(()=>n[0]||(n[0]=[s("Sonolus 基础")])),_:1}),n[8]||(n[8]=s(" 章节中讲解。以下代码中尾部含有注释的行以及 ")),n[9]||(n[9]=a("code",null,"*Order",-1)),n[10]||(n[10]=s(" 变量和 ")),n[11]||(n[11]=a("code",null,"SonolusApi",-1)),n[12]||(n[12]=s(" 函数是您需要特别注意的，除此之外的行您不需要了解，Sonolus.h 会自动处理他们。"))]),n[14]||(n[14]=p(`<div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Archetype</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    VariablesArray<span class="token operator">&lt;</span>EntityMemoryId<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>memory <span class="token operator">=</span> EntityMemory<span class="token punctuation">;</span>                      <span class="token comment">// 实体内存区块，使用 memory[i] 获取偏移为 i 的值。</span></span>
<span class="line">    VariablesArray<span class="token operator">&lt;</span>EntitySharedMemoryId<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>sharedMemory <span class="token operator">=</span> EntitySharedMemory<span class="token punctuation">;</span>    <span class="token comment">// 共享实体内存区块，使用 sharedMemory[i] 获取偏移为 i 的值。</span></span>
<span class="line">    EntityInfoGroup <span class="token operator">&amp;</span>info <span class="token operator">=</span> EntityInfo<span class="token punctuation">;</span>                                         <span class="token comment">// 实体信息区块。</span></span>
<span class="line">    EntityDespawnGroup <span class="token operator">&amp;</span>despawn <span class="token operator">=</span> EntityDespawn<span class="token punctuation">;</span>                                <span class="token comment">// 销毁实体区块，使用 despawn.despawn = 1 销毁实体。</span></span>
<span class="line">    EntityInputGroup <span class="token operator">&amp;</span>input <span class="token operator">=</span> EntityInput<span class="token punctuation">;</span>                                      <span class="token comment">// 实体结果区块。</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line">    ArchetypeLifeGroup life <span class="token operator">=</span> ArchetypeLife<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>                                <span class="token comment">// 原型生命值区块，只能在 preprocess 函数中修改。</span></span>
<span class="line"></span>
<span class="line">    string name <span class="token operator">=</span> <span class="token string">&quot;Default Archetype&quot;</span><span class="token punctuation">;</span>                                          <span class="token comment">// 原型名。</span></span>
<span class="line">    <span class="token keyword">bool</span> hasInput <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                                                      <span class="token comment">// 是否计入 combo。</span></span>
<span class="line">    vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> imports<span class="token punctuation">;</span></span>
<span class="line">    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> exports<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">double</span> preprocessOrder <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    SonolusApi <span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">double</span> spawnOrderOrder <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    SonolusApi <span class="token function">spawnOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">double</span> shouldSpawnOrder <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    SonolusApi <span class="token function">shouldSpawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">double</span> initializeOrder <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    SonolusApi <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">double</span> updateSequentialOrder <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    SonolusApi <span class="token function">updateSequential</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">double</span> touchOrder <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    SonolusApi <span class="token function">touch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">double</span> updateParallelOrder <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    SonolusApi <span class="token function">updateParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">double</span> terminateOrder <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    SonolusApi <span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个实体在整个生命周期中有且仅有三种状态: 未激活，已激活和已销毁。</p><h3 id="preprocess" tabindex="-1"><a class="header-anchor" href="#preprocess"><span><code>preprocess</code></span></a></h3><p><code>preprocess</code> 回调函数将在关卡初始化时执行，其目的是为了修改部分区块数据(故 <code>preprocess</code> 回调函数拥有几乎最高的读写权限)。</p><h3 id="spawnorder" tabindex="-1"><a class="header-anchor" href="#spawnorder"><span><code>spawnOrder</code></span></a></h3><p><code>spawnOrder</code> 回调函数将在关卡初始化时执行，其返回值将作为实体激活顺序。该值越小，意味着实体将会被更早激活，反之则会更晚激活。</p><p>实体激活顺序可在游戏暂停时的 <code>Spawn Queue</code> 中查看(需要在设置中开启调试模式)。</p><h3 id="shouldspawn" tabindex="-1"><a class="header-anchor" href="#shouldspawn"><span><code>shouldSpawn</code></span></a></h3><p><code>shouldSpawn</code> 回调函数将在实体未激活前的每一更新周期执行，其返回值将作为是否激活实体的依据。该值为 <code>true</code> 时，意味着实体将在该更新周期被激活，并且后续更新周期中将不再调用该回调函数，反之实体将不会在该更新周期中激活。</p><p>实体激活状态可在游戏暂停时的 <code>Spawn Queue</code> 中查看(需要在设置中开启调试模式)。</p><p>当前已激活实体可在游戏暂停时的 <code>Active Entities</code> 中查看(需要在设置中开启调试模式)。</p><h3 id="initialize" tabindex="-1"><a class="header-anchor" href="#initialize"><span><code>initialize</code></span></a></h3><p><code>initialize</code> 回调函数将在 <code>shouldSpawn</code> 返回值为 <code>true</code> 的更新周期执行，并且只会被调用一次，其目的是为了在实体激活前初始化相关变量。</p><h3 id="updatesequential" tabindex="-1"><a class="header-anchor" href="#updatesequential"><span><code>updateSequential</code></span></a></h3><p><code>updateSequential</code> 回调函数将在实体激活时的每一更新周期执行，其目的是为了顺序更新实体变量或执行相关函数。</p><h3 id="touch" tabindex="-1"><a class="header-anchor" href="#touch"><span><code>touch</code></span></a></h3><p><code>touch</code> 回调函数将在实体激活时有用户触摸的更新周期中执行，其目的是为了处理用户触摸信息。</p><p>用户触摸可在游戏暂停时的 <code>Runtime Touch Array</code> 中查看(需要在设置中开启调试模式)。</p><h3 id="updateparallel" tabindex="-1"><a class="header-anchor" href="#updateparallel"><span><code>updateParallel</code></span></a></h3><p><code>updateParallel</code> 回调函数将在实体激活时的每一更新周期执行，其目的是为了平行更新实体变量或执行相关函数。</p><p>对于引擎开发者，您应该将大量非必要代码置于该回调函数而不是 <code>updateSequential</code> 回调函数以加快 Sonolus 的运行速度，从而提高运行帧率，提升用户体验。</p><h3 id="terminate" tabindex="-1"><a class="header-anchor" href="#terminate"><span><code>terminate</code></span></a></h3><p><code>terminate</code> 回调函数将在 <code>despawn.despawn</code> 被设置为 <code>true</code> 的更新周期中执行，并且只会被调用一次，其目的是为了销毁或更新部分变量或执行部分操作。该回调函数运行完后，该实体将会被标记为已销毁。</p><h3 id="调用顺序" tabindex="-1"><a class="header-anchor" href="#调用顺序"><span>调用顺序</span></a></h3><p>除去 <code>preprocess</code>, <code>spawnOrder</code> 回调函数，剩余回调函数将按照本文介绍的顺序先后进行调用。</p><p>回调函数执行的伪代码如下(实际这并不是 Sonolus 的源代码):</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 0 为未激活, 1 为已激活, 2 为已销毁</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldSpawn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                state <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">updateSequential</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>touchCount<span class="token punctuation">)</span> <span class="token function">touch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">updateParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">terminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例" tabindex="-1"><a class="header-anchor" href="#样例"><span>样例</span></a></h3><p>以下代码展示了原型的基本定义及使用方法。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    string name <span class="token operator">=</span> <span class="token string">&quot;Test Archetype&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 原型名定义。</span></span>
<span class="line">    <span class="token keyword">bool</span> hasInput <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token comment">// 是否计入 combo</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 定义实体数据</span></span>
<span class="line">    <span class="token function">defineImportDetailed</span><span class="token punctuation">(</span>beat<span class="token punctuation">,</span> EngineArchetypeDataName<span class="token punctuation">.</span>Beat<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">defineImport</span><span class="token punctuation">(</span>lane<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 定义导出数据</span></span>
<span class="line">    <span class="token function">defineExport</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">defineExportDetailed</span><span class="token punctuation">(</span>accuracy<span class="token punctuation">,</span> EngineArchetypeDataName<span class="token punctuation">.</span>Accuracy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 定义原型内全局变量</span></span>
<span class="line">    var a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 定义实体共享变量</span></span>
<span class="line">    var d <span class="token operator">=</span> <span class="token function">var</span><span class="token punctuation">(</span>EntitySharedMemoryId<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    var e <span class="token operator">=</span> <span class="token function">var</span><span class="token punctuation">(</span>EntitySharedMemoryId<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">double</span> preprocessOrder <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 定义回调函数顺序</span></span>
<span class="line">    SonolusApi <span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 回调函数</span></span>
<span class="line">        <span class="token comment">// 使用实体数据</span></span>
<span class="line">        var f <span class="token operator">=</span> beat <span class="token operator">*</span> lane<span class="token punctuation">;</span></span>
<span class="line">        var g <span class="token operator">=</span> beat <span class="token operator">/</span> lane<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 当然也可以不指定回调函数顺序，其值默认为 0</span></span>
<span class="line">    SonolusApi <span class="token function">updateSequential</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 回调函数</span></span>
<span class="line">        <span class="token comment">// 导出实体数据</span></span>
<span class="line">        var f <span class="token operator">=</span> beat <span class="token operator">*</span> lane<span class="token punctuation">;</span></span>
<span class="line">        var g <span class="token operator">=</span> beat <span class="token operator">/</span> lane<span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">ExportValue</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">ExportValue</span><span class="token punctuation">(</span>accuracy<span class="token punctuation">,</span> g<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这只是一个最简单的原型样例，之后您将会逐步学习多个复杂原型及一个完整引擎的编写过程。</p>`,31))])}const v=t(r,[["render",d]]),b=JSON.parse('{"path":"/sonolus.h/play/1.%20basic.html","title":"游玩模式基础","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1745767057000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"littleyang0531@cau.edu.cn","commits":2,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"dcbb26ffce1c79b5898039889207b9a274cdab0b","time":1745767057000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"cf41bee41753afa07d0ab3cd62644a45489fffce","time":1745078694000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h/play/1. basic.md"}');export{v as comp,b as data};
