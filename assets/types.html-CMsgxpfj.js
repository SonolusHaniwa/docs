import{_ as o,c as p,e as n,a as t,d as a,b as c,w as r,r as l,o as i}from"./app-BEAdBfBr.js";const d={};function u(k,s){const e=l("RouteLink");return i(),p("div",null,[s[3]||(s[3]=n(`<h1 id="types" tabindex="-1"><a class="header-anchor" href="#types"><span>Types</span></a></h1><p>Sonolus.h has the following core types: <code><span class="token keyword">FuncNode</span></code>, <code><span class="token keyword">Variable</span></code> and <code><span class="token keyword">Array</span></code>, which represents a 32-bit float number and a fixed-length array.</p><p>Sonolus.h also has the following builtin types: <code>Collection</code>, <code>Dictionary</code>, <code>Map</code>, <code>Matrix</code>, <code>Quadratic</code>, <code>Range</code>, <code>Rectangle</code> and <code>Vector</code>.</p><h2 id="funcnode" tabindex="-1"><a class="header-anchor" href="#funcnode"><span><code><span class="token keyword">FuncNode</span></code></span></a></h2><p><code><span class="token keyword">FuncNode</span></code> can be considered as a constant 32-bit float number in Sonolus, which will be stored into <code>EngineData<span class="token punctuation">.</span>nodes</code> directly. You can use this type to store a constant <code><span class="token keyword">int</span></code> number, a constant <code><span class="token keyword">float</span></code> number, or a constant <code><span class="token keyword">bool</span></code> number.</p><h3 id="declaration" tabindex="-1"><a class="header-anchor" href="#declaration"><span>Declaration</span></a></h3><p>You can declare a FuncNode using standard C++ syntax.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">FuncNode</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">FuncNode</span> b <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">FuncNode</span> c <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operators" tabindex="-1"><a class="header-anchor" href="#operators"><span>Operators</span></a></h3><p><code><span class="token keyword">FuncNode</span></code> supports the following operators:</p><ul><li>Arithmetic operators: <code><span class="token operator">+</span></code>, <code><span class="token operator">-</span></code>, <code><span class="token operator">*</span></code>, <code><span class="token operator">/</span></code>, <code><span class="token operator">%</span></code>, <code><span class="token operator">|</span></code>, <code><span class="token operator">&amp;</span></code>, <code><span class="token operator">~</span></code></li><li>Logical operators: <code><span class="token operator">||</span></code>, <code><span class="token operator">&amp;&amp;</span></code>, <code><span class="token operator">!</span></code></li><li>Comparison operators: <code><span class="token operator">==</span></code>, <code><span class="token operator">!=</span></code>, <code><span class="token operator">&lt;</span></code>, <code><span class="token operator">&lt;=</span></code>, <code><span class="token operator">&gt;</span></code>, <code><span class="token operator">&gt;=</span></code></li></ul><h2 id="variable-var" tabindex="-1"><a class="header-anchor" href="#variable-var"><span><code><span class="token keyword">Variable</span></code> / <code><span class="token keyword">var</span></code></span></a></h2><p><code><span class="token keyword">Variable</span></code>(also known as <code><span class="token keyword">var</span></code>) is the basic variable in Sonolus.h, which represents a 32-bit float number in Sonolus. You can use this variable type to store a <code><span class="token keyword">int</span></code> number, a <code><span class="token keyword">float</span></code> number, or a <code><span class="token keyword">bool</span></code> number.</p><p>It is essentially a pointer to a specific memory in a certain block in Sonolus. All the float numbers will be stored into corresponding memories.</p><h3 id="declaration-1" tabindex="-1"><a class="header-anchor" href="#declaration-1"><span>Declaration</span></a></h3><p>You can declare a variable using standard C++ syntax.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You also can declare a variable using the following syntax, which allows you to specify the location where your data was stored.</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">var</span><span class="token punctuation">(</span><span class="token constant">EntitySharedMemory</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="operators-1" tabindex="-1"><a class="header-anchor" href="#operators-1"><span>Operators</span></a></h3><p><code><span class="token keyword">var</span></code> supports the following operators:</p><ul><li>Assignment opeartors: <code><span class="token operator">=</span></code>, <code><span class="token operator">+=</span></code>, <code><span class="token operator">-=</span></code>, <code><span class="token operator">*=</span></code>, <code><span class="token operator">/=</span></code>, <code><span class="token operator">%=</span></code>, <code><span class="token operator">&amp;=</span></code>, <code><span class="token operator">|=</span></code></li><li>Increment / Decrement operators: <code><span class="token operator">++</span>a</code>, <code><span class="token operator">--</span>a</code>, <code>a<span class="token operator">++</span></code>, <code>a<span class="token operator">--</span></code>.</li><li>Arithmetic operators: <code><span class="token operator">+</span></code>, <code><span class="token operator">-</span></code>, <code><span class="token operator">*</span></code>, <code><span class="token operator">/</span></code>, <code><span class="token operator">%</span></code>, <code><span class="token operator">|</span></code>, <code><span class="token operator">&amp;</span></code>, <code><span class="token operator">~</span></code></li><li>Logical operators: <code><span class="token operator">||</span></code>, <code><span class="token operator">&amp;&amp;</span></code>, <code><span class="token operator">!</span></code></li><li>Comparison operators: <code><span class="token operator">==</span></code>, <code><span class="token operator">!=</span></code>, <code><span class="token operator">&lt;</span></code>, <code><span class="token operator">&lt;=</span></code>, <code><span class="token operator">&gt;</span></code>, <code><span class="token operator">&gt;=</span></code></li></ul><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>For reminder operator, it returns the remainder in real numbers(<code>a <span class="token operator">%</span> b <span class="token operator">=</span> a <span class="token operator">-</span> b <span class="token operator">*</span> <span class="token function">Ceil</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span></code>), rather than the result of the multiplicative inverse.</p></div><p><code><span class="token keyword">var</span></code> is the only supported variable type for condition expressions. Any non-zero value will be considered as <code><span class="token boolean">true</span></code>, and only <code><span class="token number">0</span></code> will be considered as <code><span class="token boolean">false</span></code>. It is same as in C++.</p><ul><li>Selection statements: <code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>condition<span class="token operator">&gt;</span><span class="token punctuation">)</span></code>, <code><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>condition<span class="token operator">&gt;</span><span class="token punctuation">)</span></code>, <code><span class="token keyword">case</span> <span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span> <span class="token keyword">break</span><span class="token punctuation">;</span></code></li><li>Loop statements: <code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>init<span class="token operator">-</span>expression<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>condition<span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span><span class="token punctuation">)</span></code>, <code><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>condition<span class="token operator">&gt;</span><span class="token punctuation">)</span></code></li></ul><h2 id="array" tabindex="-1"><a class="header-anchor" href="#array"><span><code><span class="token keyword">Array</span></code></span></a></h2><p><code><span class="token keyword">Array</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> size<span class="token operator">&gt;</span></code> stores a fixed number of elements of the same type. It is very similar to array in C++.</p><p><code><span class="token keyword">Array</span></code> has two template paramters:</p><ul><li><code>T</code>: The type of elements.</li><li><code>size</code>: The length of the array. It must be a non-negative constant <code><span class="token keyword">int</span></code> value.</li></ul><h3 id="declaration-2" tabindex="-1"><a class="header-anchor" href="#declaration-2"><span>Declaration</span></a></h3><p>You can declare a array using the following syntax:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">&gt;</span> arr1<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">&gt;</span> arr2<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">&gt;</span> arr3 <span class="token operator">=</span> arr1<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Since the usage of template paramters, two arrays will be considered as the same type of arrays only when the type of elements and the length of the array are the same.</p><p>Elements in an array can be copies to another array only when these two arrays are considered as the same type of arrays. This rule is valid in both array constructor and array assignment operator:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">&gt;</span> arr1<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">&gt;</span> arr2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Ok</span></span>
<span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">&gt;</span> arr3 <span class="token operator">=</span> arr1<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">&gt;</span> arr4 <span class="token operator">=</span> arr2<span class="token punctuation">;</span></span>
<span class="line">arr1 <span class="token operator">=</span> arr3<span class="token punctuation">;</span></span>
<span class="line">arr2 <span class="token operator">=</span> arr4<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Not ok</span></span>
<span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">&gt;</span> arr5 <span class="token operator">=</span> arr2<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token operator">&gt;</span> arr6 <span class="token operator">=</span> arr1<span class="token punctuation">;</span></span>
<span class="line">arr1 <span class="token operator">=</span> arr6<span class="token punctuation">;</span></span>
<span class="line">arr2 <span class="token operator">=</span> arr5<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="operators-2" tabindex="-1"><a class="header-anchor" href="#operators-2"><span>Operators</span></a></h3><p>Array can be copied from an another same type array by <code><span class="token operator">=</span></code> assignment operator:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">&gt;</span> arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">;</span></span>
<span class="line">arr1 <span class="token operator">=</span> arr2<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Elements can be accessed by index:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">&gt;</span> arr<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> c <span class="token operator">=</span> arr<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Elements can be updated by index:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">var</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">&gt;</span> arr<span class="token punctuation">;</span></span>
<span class="line">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="builtin-types" tabindex="-1"><a class="header-anchor" href="#builtin-types"><span>Builtin Types</span></a></h2>`,43)),t("p",null,[s[1]||(s[1]=a("All the builtin types was implemented using core types above. You can check ",-1)),c(e,{to:"/sonolus.h-en/api/"},{default:r(()=>s[0]||(s[0]=[a("API",-1)])),_:1,__:[0]}),s[2]||(s[2]=a(" for their usages.",-1))]),s[4]||(s[4]=n(`<h2 id="custom-types" tabindex="-1"><a class="header-anchor" href="#custom-types"><span>Custom Types</span></a></h2><p>You can implemented you own custom types using standard C++ syntax.</p><p>The <code><span class="token constant">Constructor</span></code>/<code><span class="token constant">Destructor</span></code>/<code><span class="token constant">Constructor</span></code>/<code><span class="token constant">Constructor</span></code> prefix must be added before the definitions of constructor/destructor/copy/move functions for classes/structs to make up for the missing return type compared to regular function definitions; otherwise, the interpreter will recognize them as function calls:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Vec3D</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span></span>
<span class="line">    <span class="token constant">Constructor</span> <span class="token function">Vec3D</span><span class="token punctuation">(</span><span class="token keyword">var</span> X <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">var</span> Y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">var</span> Z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        x <span class="token operator">=</span> X<span class="token punctuation">;</span></span>
<span class="line">        y <span class="token operator">=</span> Y<span class="token punctuation">;</span></span>
<span class="line">        z <span class="token operator">=</span> Z<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token constant">SonolusApi</span> <span class="token function">Distance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">Power</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y <span class="token operator">+</span> z <span class="token operator">*</span> z<span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token constant">SonolusApi</span> <span class="token function">Output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">DebugLog</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">DebugLog</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">DebugLog</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4))])}const b=o(d,[["render",u]]),v=JSON.parse('{"path":"/sonolus.h-en/basics/types.html","title":"Types","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1749482336000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"littleyang0531@cau.edu.cn","commits":2,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"8aee243a9c8f201e7149e2aac9a391804d10ed74","time":1749482336000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"79da61286b4f0aed95b31fbedf2a0dee93419090","time":1749307539000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update Sonolus.h(English)"}]},"filePathRelative":"sonolus.h-en/basics/types.md"}');export{b as comp,v as data};
