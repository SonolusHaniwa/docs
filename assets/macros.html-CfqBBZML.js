import{_ as o,c as a,e as t,o as n}from"./app-jaDjdgzx.js";const c={};function r(d,e){return n(),a("div",null,e[0]||(e[0]=[t('<h1 id="macros" tabindex="-1"><a class="header-anchor" href="#macros"><span>Macros</span></a></h1><h2 id="disable-interpreter" tabindex="-1"><a class="header-anchor" href="#disable-interpreter"><span><code>DISABLE_INTERPRETER</code></span></a></h2><p>The <code>DISABLE_INTERPRETER</code> specifier is used to indicate which code does not need to be interpreted by the interpreter.</p><h2 id="compile-runtime" tabindex="-1"><a class="header-anchor" href="#compile-runtime"><span><code>COMPILE_RUNTIME</code></span></a></h2><p>The <code>COMPILE_RUNTIME</code> specifier is used to distinguish whether the current process is interpreting or compiling.</p><p><strong>It will be added to the head of the file automatically by interpreter, so you don&#39;t need to add it by yourself.</strong></p><h2 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor"><span><code>Constructor</code></span></a></h2><p>The <code>Constructor</code> specifier should be placed before the class constructor so that the interpreter can recognize this is a class constructor.</p><h2 id="destructor" tabindex="-1"><a class="header-anchor" href="#destructor"><span><code>Destructor</code></span></a></h2><p>The <code>Destructor</code> specifier should be placed before the class destructor so that the interpreter can recognize this is a class destructor.</p><h2 id="blocked" tabindex="-1"><a class="header-anchor" href="#blocked"><span><code>Blocked</code></span></a></h2><p>The <code>Blocked</code> specifier can be placed before any function definition so that the interpreter will not add extra params to this function. You can use this specifier to define a function which has the same name with library function.</p><h2 id="nontype" tabindex="-1"><a class="header-anchor" href="#nontype"><span><code>NonType</code></span></a></h2><p><strong>Decrypted</strong>.</p><h2 id="cpploop" tabindex="-1"><a class="header-anchor" href="#cpploop"><span><code>CppLoop</code></span></a></h2><p>The <code>CppLoop</code> specifier can be placed in any part of <code>for</code> loop condition. All the <code>for</code> loop with <code>CppLoop</code> specifier will be treated as a normal C++ <code>for</code> loop instead of Sonolus <code>for</code> loop.</p><h2 id="sonolusapi" tabindex="-1"><a class="header-anchor" href="#sonolusapi"><span><code>SonolusApi</code></span></a></h2><p><code>SonolusApi</code> is same as <code>var</code>, but interpreter only recognize a function return <code>SonolusApi</code> as a Sonolus function and convert all statements into Sonolus statements, instead of <code>var</code>.</p><h2 id="play" tabindex="-1"><a class="header-anchor" href="#play"><span><code>play</code></span></a></h2><p>The <code>play</code> specifier tells compiler to generate program that only can generate engine play data and engine configuration.</p><p><strong>It will be added by <code>libsonolush</code> automatically. If you are compiling by hand, you may need to add compilation paramteter <code>-Dplay</code>.</strong></p><h2 id="tutorial" tabindex="-1"><a class="header-anchor" href="#tutorial"><span><code>tutorial</code></span></a></h2><p>The <code>tutorial</code> specifier tells compiler to generate program that only can generate engine tutorial data and engine configuration.</p><p><strong>It will be added by <code>libsonolush</code> automatically. If you are compiling by hand, you may need to add compilation paramteter <code>-Dtutorial</code>.</strong></p><h2 id="preview" tabindex="-1"><a class="header-anchor" href="#preview"><span><code>preview</code></span></a></h2><p>The <code>preview</code> specifier tells compiler to generate program that only can generate engine preview data and engine configuration.</p><p><strong>It will be added by <code>libsonolush</code> automatically. If you are compiling by hand, you may need to add compilation paramteter <code>-Dpreview</code>.</strong></p><h2 id="watch" tabindex="-1"><a class="header-anchor" href="#watch"><span><code>watch</code></span></a></h2><p>The <code>watch</code> specifier tells compiler to generate program that only can generate engine watch data and engine configuration.</p><p><strong>It will be added by <code>libsonolush</code> automatically. If you are compiling by hand, you may need to add compilation paramteter <code>-Dwatch</code>.</strong></p>',30)]))}const s=o(c,[["render",r]]),p=JSON.parse('{"path":"/sonolus.h-en/api/macros.html","title":"Macros","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1749402357000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"littleyang0531@cau.edu.cn","commits":1,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"4b96feefa5aab4c70c5b9c1d39c17f58835a6a78","time":1749402357000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h-en/api/macros.md"}');export{s as comp,p as data};
