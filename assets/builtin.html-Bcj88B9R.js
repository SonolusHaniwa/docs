import{_ as e,c as o,e as d,o as r}from"./app-jaDjdgzx.js";const n={};function a(s,t){return r(),o("div",null,t[0]||(t[0]=[d('<h1 id="builtins" tabindex="-1"><a class="header-anchor" href="#builtins"><span>Builtins</span></a></h1><h2 id="function-printstack" tabindex="-1"><a class="header-anchor" href="#function-printstack"><span><code>function</code> <code>printStack</code></span></a></h2><p><strong>Description</strong>: Prints the current call stack to the standard error stream for debugging purposes.</p><h2 id="function-sonolusassert" tabindex="-1"><a class="header-anchor" href="#function-sonolusassert"><span><code>function</code> <code>SonolusAssert</code></span></a></h2><p><strong>Description</strong>: A macro used to perform assertions during compilation. If the condition is false, it logs an error message and aborts the program.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>expr</code></td><td><em>expression</em></td><td><em>required</em></td><td>The condition to assert.</td></tr><tr><td><code>...</code></td><td><em>format arguments</em></td><td><em>required</em></td><td>Variable arguments for the error message.</td></tr></tbody></table><h2 id="function-createnodecontainer" tabindex="-1"><a class="header-anchor" href="#function-createnodecontainer"><span><code>function</code> <code>createNodeContainer</code></span></a></h2><p><strong>Description</strong>: Initializes a new node container for storing function nodes. Optionally controls whether a block counter should be added.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>add</code></td><td><code>bool</code></td><td><code>true</code></td><td>If <code>true</code>, the block counter is pushed onto the stack. If <code>false</code>, the current block counter is updated.</td></tr></tbody></table><h2 id="function-mergenodecontainer" tabindex="-1"><a class="header-anchor" href="#function-mergenodecontainer"><span><code>function</code> <code>mergeNodeContainer</code></span></a></h2><p><strong>Description</strong>: Merges the current node container into a single block node and updates the block counter accordingly.</p><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>FuncNode</code></td><td>A merged <code>FuncNode</code> representing a block of executed nodes. If the container is empty, returns a block with a single <code>0</code> node.</td></tr></tbody></table><h2 id="function-sonolusrun" tabindex="-1"><a class="header-anchor" href="#function-sonolusrun"><span><code>function</code> <code>SonolusRun</code></span></a></h2><p><strong>Description</strong>: Executes the provided <code>FuncNode</code> and adds it to the current node container.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>code</code></td><td><code>FuncNode</code></td><td><em>required</em></td><td>The function node to be executed and added to the current node container.</td></tr></tbody></table><h2 id="function-sizeof" tabindex="-1"><a class="header-anchor" href="#function-sizeof"><span><code>function</code> <code>SizeOf</code></span></a></h2><p><strong>Description</strong>: Measures the Sonolus memory size of an object of type <code>T</code>.</p><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>map&lt;int, int&gt;</code></td><td>A map representing the memory size of the object. The key is the block id, and the value is the size.</td></tr></tbody></table><h2 id="json-library" tabindex="-1"><a class="header-anchor" href="#json-library"><span>JSON library</span></a></h2><h3 id="function-json-encode" tabindex="-1"><a class="header-anchor" href="#function-json-encode"><span><code>function</code> <code>json_encode</code></span></a></h3><p><strong>Description</strong>: Converts a <code>Json::Value</code> object into a JSON string using the <code>Json::FastWriter</code> to produce a compact representation.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td><code>Json::Value</code></td><td><em>required</em></td><td>The JSON value object to be encoded into a string.</td></tr></tbody></table><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>string</code></td><td>A compact JSON string representation of <code>val</code>.</td></tr></tbody></table><h3 id="function-json-pretty-encode" tabindex="-1"><a class="header-anchor" href="#function-json-pretty-encode"><span><code>function</code> <code>json_pretty_encode</code></span></a></h3><p><strong>Description</strong>: Converts a <code>Json::Value</code> object into a JSON string using the <code>Json::StyledWriter</code> to produce a formatted and human-readable representation.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>val</code></td><td><code>Json::Value</code></td><td><em>required</em></td><td>The JSON value object to be encoded into a pretty string.</td></tr></tbody></table><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>string</code></td><td>A pretty-printed JSON string representation of <code>val</code>.</td></tr></tbody></table><h3 id="function-json-decode" tabindex="-1"><a class="header-anchor" href="#function-json-decode"><span><code>function</code> <code>json_decode</code></span></a></h3><p><strong>Description</strong>: Parses a JSON string into a <code>Json::Value</code> object using the <code>Json::Reader</code>.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>json</code></td><td><code>string</code></td><td><em>required</em></td><td>The JSON string to be parsed into a <code>Json::Value</code> object.</td></tr><tr><td><code>res</code></td><td><code>Json::Value&amp;</code></td><td><em>required</em></td><td>Reference to the <code>Json::Value</code> object where the parsed result will be stored.</td></tr></tbody></table><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>bool</code></td><td>Returns <code>true</code> if parsing is successful, otherwise <code>false</code>.</td></tr></tbody></table><h3 id="function-json-decode-1" tabindex="-1"><a class="header-anchor" href="#function-json-decode-1"><span><code>function</code> <code>json_decode</code></span></a></h3><p><strong>Description</strong>: Parses a JSON string into a <code>Json::Value</code> object using the <code>Json::Reader</code> and returns the result directly.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>json</code></td><td><code>string</code></td><td><em>required</em></td><td>The JSON string to be parsed into a <code>Json::Value</code> object.</td></tr></tbody></table><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>Json::Value</code></td><td>The parsed JSON value object from the input string.</td></tr></tbody></table><h2 id="gzip-library" tabindex="-1"><a class="header-anchor" href="#gzip-library"><span>GZip library</span></a></h2><h3 id="function-compress-gzip" tabindex="-1"><a class="header-anchor" href="#function-compress-gzip"><span><code>function</code> <code>compress_gzip</code></span></a></h3><p><strong>Description</strong>: Compresses a string using the GZIP compression method via zlib.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>str</code></td><td><code>string</code></td><td><em>required</em></td><td>The input string to be compressed.</td></tr><tr><td><code>compressionlevel</code></td><td><code>int</code></td><td><code>Z_BEST_COMPRESSION</code></td><td>The compression level to use. Valid values are from <code>Z_NO_COMPRESSION</code> to <code>Z_BEST_COMPRESSION</code>.</td></tr></tbody></table><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>string</code></td><td>The compressed output string in GZIP format.</td></tr></tbody></table><h3 id="function-compress-deflate" tabindex="-1"><a class="header-anchor" href="#function-compress-deflate"><span><code>function</code> <code>compress_deflate</code></span></a></h3><p><strong>Description</strong>: Compresses a string using the DEFLATE compression method via zlib.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>str</code></td><td><code>string</code></td><td><em>required</em></td><td>The input string to be compressed.</td></tr><tr><td><code>compressionlevel</code></td><td><code>int</code></td><td><code>Z_BEST_COMPRESSION</code></td><td>The compression level to use. Valid values are from <code>Z_NO_COMPRESSION</code> to <code>Z_BEST_COMPRESSION</code>.</td></tr></tbody></table><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>string</code></td><td>The compressed output string in DEFLATE format.</td></tr></tbody></table><h3 id="function-decompress-deflate" tabindex="-1"><a class="header-anchor" href="#function-decompress-deflate"><span><code>function</code> <code>decompress_deflate</code></span></a></h3><p><strong>Description</strong>: Decompresses a string that was compressed using the DEFLATE method via zlib.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>str</code></td><td><code>string</code></td><td><em>required</em></td><td>The input string to be decompressed.</td></tr></tbody></table><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>string</code></td><td>The decompressed output string in plain text.</td></tr></tbody></table><h3 id="function-decompress-gzip" tabindex="-1"><a class="header-anchor" href="#function-decompress-gzip"><span><code>function</code> <code>decompress_gzip</code></span></a></h3><p><strong>Description</strong>: Decompresses a string that was compressed using the GZIP method via zlib.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>str</code></td><td><code>string</code></td><td><em>required</em></td><td>The input string to be decompressed.</td></tr></tbody></table><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>string</code></td><td>The decompressed output string in plain text.</td></tr></tbody></table>',73)]))}const i=e(n,[["render",a]]),h=JSON.parse('{"path":"/sonolus.h-en/api/builtin.html","title":"Builtins","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1754061692000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"littleyang0531@cau.edu.cn","commits":2,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"0b918d492e3c4ec530d934f3b04c4bde34651138","time":1754061692000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"4b96feefa5aab4c70c5b9c1d39c17f58835a6a78","time":1749402357000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h-en/api/builtin.md"}');export{i as comp,h as data};
