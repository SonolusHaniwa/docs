import{_ as s,c as a,e,o as i}from"./app-DOik5NaU.js";const t={};function p(o,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h1 id="resources" tabindex="-1"><a class="header-anchor" href="#resources"><span>Resources</span></a></h1><h2 id="skin-sprites" tabindex="-1"><a class="header-anchor" href="#skin-sprites"><span>Skin Sprites</span></a></h2><p>Skin sprites are declared by <code>defineSkinSprite</code> function:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief Define a skin sprite</span>
<span class="line"> * @param name Sprite name</span>
<span class="line"> * @param path Sprite image path</span>
<span class="line"> * @return Sprite id</span>
<span class="line"> */</span></span>
<span class="line">SkinSprite <span class="token function">defineSkinSprite</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> string path <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">SkinSprite RedNote <span class="token operator">=</span> <span class="token function">defineSkinSprite</span><span class="token punctuation">(</span>SkinSpriteName<span class="token punctuation">.</span>NoteHeadRed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">SkinSprite YellowNote <span class="token operator">=</span> <span class="token function">defineSkinSprite</span><span class="token punctuation">(</span>SkinSpriteName<span class="token punctuation">.</span>NoteHeadYellow<span class="token punctuation">,</span> <span class="token string">&quot;./skins/YellowNote.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">SkinSprite BlueNote <span class="token operator">=</span> <span class="token function">defineSkinSprite</span><span class="token punctuation">(</span><span class="token string">&quot;Blue Note&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">SkinSprite GreenNote <span class="token operator">=</span> <span class="token function">defineSkinSprite</span><span class="token punctuation">(</span><span class="token string">&quot;Green Note&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./skins/GreenNote.png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use <code>PackSkin</code> function to pack all sprites into skin data and skin texture:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">PackSkin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You just need to call <code>defineSkinSprite</code> function once for each skin sprites, then Sonolus.h will pack them into engine data automatically. When you call <code>PackSkin</code> function, Sonolus.h will find all sprite images accroding to their sprite image path and pack them into skin data and skin texture. If sprite image path is empty, it will use <code>./skins/{{ name }}.png</code> as its default path.</p><p>Standard skin sprite names were declared in <code>SkinSpriteName</code> class. You can find all standard skin sprite names in <a href="https://github.com/Sonolus/sonolus-core/blob/main/src/common/core/skin/skin-sprite-name.ts#L1" target="_blank" rel="noopener noreferrer">https://github.com/Sonolus/sonolus-core/blob/main/src/common/core/skin/skin-sprite-name.ts#L1</a> or <a href="https://github.com/SonolusHaniwa/sonolus.h/blob/main/sonolus/resource/Skins.h#L131" target="_blank" rel="noopener noreferrer">https://github.com/SonolusHaniwa/sonolus.h/blob/main/sonolus/resource/Skins.h#L131</a>.</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>When you try to assign a value of type <code>SkinSprite</code> to <code>var</code>, you may encounter a compilation error <code>ambiguous overload for ‘operator=’ (operand types are ‘Variable’ and ‘SkinSprite’)</code>. You can try to use function-style explicit type conversion to change <code>SkinSprite</code> into <code>int</code> to solve this issue.</p></div><p>To set the render mode for skin, set the <code>enginePlayData.render_mode</code> / <code>engineTutorialData.render_mode</code> / <code>enginePreviewData.render_mode</code> / <code>engineWatchData.render_data</code> to <code>default</code>, <code>standard</code>, or <code>lightweight</code> before you pack engine data.</p><h2 id="effect-clips" tabindex="-1"><a class="header-anchor" href="#effect-clips"><span>Effect Clips</span></a></h2><p>Effect clips are declared by <code>defineEffectClip</code> function:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief Define a effect clip</span>
<span class="line"> * @param name Clip name</span>
<span class="line"> * @param path Clip audio path</span>
<span class="line"> * @return Clip id</span>
<span class="line"> */</span></span>
<span class="line">EffectClip <span class="token function">defineEffectClip</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> string path <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">EffectClip Perfect <span class="token operator">=</span> <span class="token function">defineEffectClip</span><span class="token punctuation">(</span>EffectClipName<span class="token punctuation">.</span>Perfect<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">EffectClip Great <span class="token operator">=</span> <span class="token function">defineEffectClip</span><span class="token punctuation">(</span>EffectClipName<span class="token punctuation">.</span>Great<span class="token punctuation">,</span> <span class="token string">&quot;./effects/Great.mp3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">EffectClip Good <span class="token operator">=</span> <span class="token function">defineEffectClip</span><span class="token punctuation">(</span><span class="token string">&quot;Good&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">EffectClip Miss <span class="token operator">=</span> <span class="token function">defineEffectClip</span><span class="token punctuation">(</span><span class="token string">&quot;Miss&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./effects/Miss.mp3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use <code>PackEffect</code> function to pack all clips into effect data and effect audio:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">PackEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You just need to call <code>defineEffectClip</code> function once for each effect clips, then Sonolus.h will pack them into engine data automatically. When you call <code>PackEffect</code> function, Sonolus.h will find all clip audios accroding to their clip audio path and pack them into effect data and effect audio. If clip audio path is empty, it will use <code>./effects/{{ name }}.mp3</code> as its default path.</p><p>Standard effect clip names were declared in <code>EffectClip</code> class. You can find all standard effect clip names in <a href="https://github.com/Sonolus/sonolus-core/blob/main/src/common/core/effect/effect-clip-name.ts#L1" target="_blank" rel="noopener noreferrer">https://github.com/Sonolus/sonolus-core/blob/main/src/common/core/effect/effect-clip-name.ts#L1</a> or <a href="https://github.com/SonolusHaniwa/sonolus.h/blob/main/sonolus/resource/Effects.h#L77" target="_blank" rel="noopener noreferrer">https://github.com/SonolusHaniwa/sonolus.h/blob/main/sonolus/resource/Effects.h#L77</a>.</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>When you try to assign a value of type <code>EffectClip</code> to <code>var</code>, you may encounter a compilation error <code>ambiguous overload for ‘operator=’ (operand types are ‘Variable’ and ‘EffectClip’)</code>. You can try to use function-style explicit type conversion to change <code>EffectClip</code> into <code>int</code> to solve this issue.</p></div><h2 id="particle-effects" tabindex="-1"><a class="header-anchor" href="#particle-effects"><span>Particle Effects</span></a></h2><p>Particle effects are declared by <code>defineParticleEffect</code> function:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief Define a particle effect</span>
<span class="line"> * @param name Effect name</span>
<span class="line"> * @return Effect id</span>
<span class="line"> */</span></span>
<span class="line">ParticleEffect <span class="token function">defineParticleEffect</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">ParticleEffect RedTap <span class="token operator">=</span> <span class="token function">defineParticleEffect</span><span class="token punctuation">(</span>ParticleEffectName<span class="token punctuation">.</span>NoteCircularTapRed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">ParticleEffect YellowTap <span class="token operator">=</span> <span class="token function">defineParticleEffect</span><span class="token punctuation">(</span><span class="token string">&quot;Yellow Tap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Currently packing particle effects into particle data and particle texture is not supported.</p><p>You just need to call <code>defineParticleEffect</code> function once for each particle effects, then Sonolus.h will pack them into engine data automatically.</p><p>Standard particle effect names were declared in <code>ParticleEffectName</code> class. You can find all standard particle effect names in <a href="https://github.com/Sonolus/sonolus-core/blob/main/src/common/core/particle/particle-effect-name.ts#L1" target="_blank" rel="noopener noreferrer">https://github.com/Sonolus/sonolus-core/blob/main/src/common/core/particle/particle-effect-name.ts#L1</a> or <a href="https://github.com/SonolusHaniwa/sonolus.h/blob/main/sonolus/resource/Particles.h#L29" target="_blank" rel="noopener noreferrer">https://github.com/SonolusHaniwa/sonolus.h/blob/main/sonolus/resource/Particles.h#L29</a>.</p><h2 id="buckets" tabindex="-1"><a class="header-anchor" href="#buckets"><span>Buckets</span></a></h2><p>Buckets are declared by <code>defineBucket</code> function:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief Create a bucket sprite</span>
<span class="line"> * @param id Sprite id. You can use value with type SkinSprite.</span>
<span class="line"> * @param fallbackId Unknown.</span>
<span class="line"> * @param x X position.</span>
<span class="line"> * @param y Y position.</span>
<span class="line"> * @param w Width.</span>
<span class="line"> * @param h Height.</span>
<span class="line"> * @param rotation Counterclockwise rotation angle in degrees.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">EngineDataBucketSprite</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> fallbackId<span class="token punctuation">,</span> <span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">double</span> y<span class="token punctuation">,</span> <span class="token keyword">double</span> w<span class="token punctuation">,</span> <span class="token keyword">double</span> h<span class="token punctuation">,</span> <span class="token keyword">double</span> rotation<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief Define a bucket</span>
<span class="line"> * @param sprites Bucket sprites.</span>
<span class="line"> * @param unit Bucket unit. You need to use Texts.*Unit or empty string as its value.</span>
<span class="line"> * @return Bucket id.</span>
<span class="line"> */</span></span>
<span class="line">Bucket <span class="token function">defineBucket</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>EngineDataBucketSprite<span class="token operator">&gt;</span> sprites<span class="token punctuation">,</span> string unit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Bucket NormalNoteBucket <span class="token operator">=</span> <span class="token function">defineBucket</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">EngineDataBucketSprite</span><span class="token punctuation">(</span>Sprites<span class="token punctuation">.</span>NormalNote<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> Text<span class="token punctuation">.</span>MillisecondUnit<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Bucket CriticalNoteBucket <span class="token operator">=</span> <span class="token function">defineBucket</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">EngineDataBucketSprite</span><span class="token punctuation">(</span>Sprites<span class="token punctuation">.</span>CriticalNote<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">270</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You just need to call <code>defineBucket</code> function once for each buckets, then Sonolus.h will pack them into engine data automatically.</p><p>The y-axis coordinate range of bucket canvas is <code>[-1, 1]</code>, and there is no limit for x-axis coordinate. Obviously you can draw a sprite outside of this area, but we do not recommend drawing sprites outside of this area.</p><p>The bucket value needs to match the unit you have set. For example, if you set <code>unit</code> is equal to <code>Text.MillisecondUnit</code> and your <code>bucketValue</code> is <code>1.0s</code>, you need to set <code>input.bucketValue</code> to <code>1000</code> instead of <code>1.0</code> in this entity.</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>When you try to assign a value of type <code>Bucket</code> to <code>var</code>, you may encounter a compilation error <code>ambiguous overload for ‘operator=’ (operand types are ‘Variable’ and ‘Bucket’)</code>. You can try to use function-style explicit type conversion to change <code>Bucket</code> into <code>int</code> to solve this issue.</p></div><h2 id="tutorial-instruction-texts" tabindex="-1"><a class="header-anchor" href="#tutorial-instruction-texts"><span>Tutorial Instruction Texts</span></a></h2><p>Instruction texts are declared by <code>defineInstructionText</code> function:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief Define a instruction text</span>
<span class="line"> * @param text Instruction text.</span>
<span class="line"> * @return Instruction text id.</span>
<span class="line"> */</span></span>
<span class="line">InstructionText <span class="token function">defineInstructionText</span><span class="token punctuation">(</span>string text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">InstructionText NormalNote <span class="token operator">=</span> <span class="token function">defineInstructionText</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span>Tap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">InstructionText CriticalNote <span class="token operator">=</span> <span class="token function">defineInstructionText</span><span class="token punctuation">(</span><span class="token string">&quot;Tap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You just need to call <code>defineInstructionText</code> function once for each instruction texts, then Sonolus.h will pack them into engine data automatically.</p><p>Standard instruction texts were declared in <code>Texts</code> class. You can find all standard instruction texts in <a href="https://github.com/Sonolus/sonolus-core/blob/main/src/common/core/text.ts#L614" target="_blank" rel="noopener noreferrer">https://github.com/Sonolus/sonolus-core/blob/main/src/common/core/text.ts#L614</a> or <a href="https://github.com/SonolusHaniwa/sonolus.h/blob/main/sonolus/engine/EngineLiterals.h#L619" target="_blank" rel="noopener noreferrer">https://github.com/SonolusHaniwa/sonolus.h/blob/main/sonolus/engine/EngineLiterals.h#L619</a>.</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>When you try to assign a value of type <code>InstructionText</code> to <code>var</code>, you may encounter a compilation error <code>ambiguous overload for ‘operator=’ (operand types are ‘Variable’ and ‘InstructionText’)</code>. You can try to use function-style explicit type conversion to change <code>InstructionText</code> into <code>int</code> to solve this issue.</p></div><h2 id="tutorial-instruction-icons" tabindex="-1"><a class="header-anchor" href="#tutorial-instruction-icons"><span>Tutorial Instruction Icons</span></a></h2><p>Instruction icons are declared by <code>defineInstructionIcon</code> function:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief Define a instruction icon</span>
<span class="line"> * @param icon Instruction icon name.</span>
<span class="line"> * @return Instruction icon id.</span>
<span class="line"> */</span></span>
<span class="line">InstructionIcon <span class="token function">defineInstructionIcon</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">InstructionIcon Hand <span class="token operator">=</span> <span class="token function">defineInstructionIcon</span><span class="token punctuation">(</span>InstructionIconName<span class="token punctuation">.</span>Hand<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">InstructionIcon Arrow <span class="token operator">=</span> <span class="token function">defineInstructionIcon</span><span class="token punctuation">(</span><span class="token string">&quot;#ARROW&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You just need to call <code>defineInstructionIcon</code> function once for each instruction icons, then Sonolus.h will pack them into engine data automatically.</p><p>Standard instruction icon names were declared in <code>InstructionIconName</code> class. You can find all standard instruction icon names in <a href="https://github.com/Sonolus/sonolus-core/blob/main/src/common/core/instruction/instruction-icon-name.ts#L1" target="_blank" rel="noopener noreferrer">https://github.com/Sonolus/sonolus-core/blob/main/src/common/core/instruction/instruction-icon-name.ts#L1</a> or <a href="https://github.com/SonolusHaniwa/sonolus.h/blob/main/sonolus/engine/EngineLiterals.h#L1285" target="_blank" rel="noopener noreferrer">https://github.com/SonolusHaniwa/sonolus.h/blob/main/sonolus/engine/EngineLiterals.h#L1285</a>.</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>When you try to assign a value of type <code>InstructionIcon</code> to <code>var</code>, you may encounter a compilation error <code>ambiguous overload for ‘operator=’ (operand types are ‘Variable’ and ‘InstructionIcon’)</code>. You can try to use function-style explicit type conversion to change <code>InstructionIcon</code> into <code>int</code> to solve this issue.</p></div><h2 id="level-options" tabindex="-1"><a class="header-anchor" href="#level-options"><span>Level Options</span></a></h2><p>Engine options are declared by <code>SliderOption</code>, <code>ToggleOption</code> and <code>SelectOption</code> functions:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief Create a slider option.</span>
<span class="line"> * @param name The name of this option.</span>
<span class="line"> * @param description The description of this option.</span>
<span class="line"> * @param standard Whether this option is considered as a standard option.</span>
<span class="line"> * @param advanced Whether this option is considered as a advanced option.</span>
<span class="line"> * @param scope The scope of this option.</span>
<span class="line"> * @param def Default value of this option.</span>
<span class="line"> * @param min Minimal value of this option.</span>
<span class="line"> * @param max Maximal value of this option.</span>
<span class="line"> * @param step Step value of this option.</span>
<span class="line"> * @param unit Unit of this option.</span>
<span class="line"> * @return Option value</span>
<span class="line"> */</span></span>
<span class="line">Variable <span class="token function">SliderOption</span><span class="token punctuation">(</span></span>
<span class="line">    string name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    string description <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">bool</span> standard <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">bool</span> advanced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    string scope <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">double</span> def <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">double</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">double</span> max <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">double</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    string unit <span class="token operator">=</span> <span class="token string">&quot;&quot;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief Create a toggle option.</span>
<span class="line"> * @param name The name of this option.</span>
<span class="line"> * @param description The description of this option.</span>
<span class="line"> * @param standard Whether this option is considered as a standard option.</span>
<span class="line"> * @param advanced Whether this option is considered as a advanced option.</span>
<span class="line"> * @param scope The scope of this option.</span>
<span class="line"> * @param def Default value of this option.</span>
<span class="line"> * @return Option value</span>
<span class="line"> */</span></span>
<span class="line">Variable <span class="token function">ToggleOption</span><span class="token punctuation">(</span></span>
<span class="line">    string name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    string description <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">bool</span> standard <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">bool</span> advanced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    string scope <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">bool</span> def <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief Create a select option.</span>
<span class="line"> * @param name The name of this option.</span>
<span class="line"> * @param description The description of this option.</span>
<span class="line"> * @param standard Whether this option is considered as a standard option.</span>
<span class="line"> * @param advanced Whether this option is considered as a advanced option.</span>
<span class="line"> * @param scope The scope of this option.</span>
<span class="line"> * @param def Default value of this option.</span>
<span class="line"> * @param values Option values of this option.</span>
<span class="line"> * @return Option value</span>
<span class="line"> */</span></span>
<span class="line">Variable <span class="token function">SelectOption</span><span class="token punctuation">(</span></span>
<span class="line">    string name <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    string description <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">bool</span> standard <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">bool</span> advanced <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    string scope <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">int</span> def <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">var Mirror <span class="token operator">=</span> <span class="token function">ToggleOption</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span>Mirror<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">var NoteSpeed <span class="token operator">=</span> <span class="token function">SliderOption</span><span class="token punctuation">(</span>Text<span class="token punctuation">.</span>NoteSpeed<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;sirius&quot;</span><span class="token punctuation">,</span> <span class="token number">5.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">25.0</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">var JudgeType <span class="token operator">=</span> <span class="token function">SelectOption</span><span class="token punctuation">(</span><span class="token string">&quot;Show FAST/SLOW&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&quot;sirius&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;PERFECT and below&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;GREAT and below&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;OFF&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are three types of options available:</p><ul><li><code>SliderOption</code>: A slider control for numeric values</li><li><code>ToggleOption</code>: A toggle switch for boolean values</li><li><code>SelectOption</code>: A dropdown menu for selecting from predefined values</li></ul><p>You just need to call <code>SliderOption</code> / <code>ToggleOption</code> / <code>SelectOption</code> function once for each options, then Sonolus.h will pack them into engine configuration automatically.</p><p>Standard option names were declared in <code>Texts</code> class. You can find all standard option names in <a href="https://github.com/Sonolus/sonolus-core/blob/main/src/common/core/text.ts#L182" target="_blank" rel="noopener noreferrer">https://github.com/Sonolus/sonolus-core/blob/main/src/common/core/text.ts#L182</a> or <a href="https://github.com/SonolusHaniwa/sonolus.h/blob/main/sonolus/engine/EngineLiterals.h#L187" target="_blank" rel="noopener noreferrer">https://github.com/SonolusHaniwa/sonolus.h/blob/main/sonolus/engine/EngineLiterals.h#L187</a>.</p><h2 id="sonolus-ui" tabindex="-1"><a class="header-anchor" href="#sonolus-ui"><span>Sonolus UI</span></a></h2><p>Sonolus UI configuration is declared by <code>UI</code> class:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief Visibility class</span>
<span class="line"> * @param scale The scale size of the item.</span>
<span class="line"> * @param alpha The alpha value of the item.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Visibility</span><span class="token punctuation">(</span><span class="token keyword">double</span> scale <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">double</span> alpha <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief AnimationTween class</span>
<span class="line"> * @param from Start value of current animation tween.</span>
<span class="line"> * @param to End value of current animation tween.</span>
<span class="line"> * @param duration Duration of current animation tween.</span>
<span class="line"> * @param ease Easing type of current animation tween. Only members of \`EngineConfigurationAnimationTweenEase\` are accepted.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">AnimationTween</span><span class="token punctuation">(</span><span class="token keyword">double</span> from <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">double</span> to <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">double</span> duration <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> string ease <span class="token operator">=</span> EngineConfigurationAnimationTweenEase<span class="token punctuation">.</span>None<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/**</span>
<span class="line"> * @brief Animation class</span>
<span class="line"> * @param scale The scale animation tween of the item</span>
<span class="line"> * @param alpha The alpha animation tween of the item</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Animation</span><span class="token punctuation">(</span>AnimationTween scale <span class="token operator">=</span> <span class="token function">AnimationTween</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> AnimationTween alpha <span class="token operator">=</span> <span class="token function">AnimationTween</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">UI</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">     * @brief Set UI scope.</span>
<span class="line">     * @param scope UI scope.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">SetScope</span><span class="token punctuation">(</span>string scope<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">     * @brief Set UI primary metric and secondary metric.</span>
<span class="line">     * </span>
<span class="line">     * @param primary Primary metric to show. Only members of \`EngineConfigurationMetric\` are accepted.</span>
<span class="line">     * @param primaryVisibility Visibility property of primary metric.</span>
<span class="line">     * @param secondary Secondary metric to show. Only members of \`EngineConfigurationMetric\` are accepted.</span>
<span class="line">     * @param secondaryVisibility Visibility property of secondary metric.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">SetMetric</span><span class="token punctuation">(</span></span>
<span class="line">        string primary <span class="token operator">=</span> EngineConfigurationMetric<span class="token punctuation">.</span>Arcade<span class="token punctuation">,</span> </span>
<span class="line">        Visibility primaryVisibility <span class="token operator">=</span> <span class="token function">Visibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        string secondary <span class="token operator">=</span> EngineConfigurationMetric<span class="token punctuation">.</span>Life<span class="token punctuation">,</span> </span>
<span class="line">        Visibility secondaryVisibility <span class="token operator">=</span> <span class="token function">Visibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">     * @brief Set UI menu.</span>
<span class="line">     * @param visibility Visibility property of menu.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">SetMenu</span><span class="token punctuation">(</span>Visibility visibility <span class="token operator">=</span> <span class="token function">Visibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">     * @brief Set UI judgment.</span>
<span class="line">     * </span>
<span class="line">     * @param visibility Visibility property of judgment.</span>
<span class="line">     * @param animation Animation of judgment.</span>
<span class="line">     * @param errorStyle Style of positive judgment error. Only members of \`EngineConfigurationJudgmentErrorStyle\` are accepted.</span>
<span class="line">     * @param errorPlacement Placement of judgment error. Only members of \`EngineConfigurationJudgmentErrorPlacement\` are accepted.</span>
<span class="line">     * @param errorMin Minimum judgment error. Only judgment errors larger than this will be shown.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">SetJudgment</span><span class="token punctuation">(</span></span>
<span class="line">        Visibility visibility <span class="token operator">=</span> <span class="token function">Visibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">        Animation animation <span class="token operator">=</span> <span class="token function">Animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        string errorStyle <span class="token operator">=</span> EngineConfigurationJudgmentErrorStyle<span class="token punctuation">.</span>None<span class="token punctuation">,</span></span>
<span class="line">        string errorPlacement <span class="token operator">=</span> EngineConfigurationJudgmentErrorPlacement<span class="token punctuation">.</span>LeftRight<span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">double</span> errorMin <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">     * @brief Set UI combo.</span>
<span class="line">     * @param visibility Visibility property of combo.</span>
<span class="line">     * @param animation Animation of combo.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">SetCombo</span><span class="token punctuation">(</span>Visibility visibility <span class="token operator">=</span> <span class="token function">Visibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Animation animation <span class="token operator">=</span> <span class="token function">Animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">     * @brief Set UI progress.</span>
<span class="line">     * @param visibility Visibility property of progress.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">SetProgress</span><span class="token punctuation">(</span>Visibility visibility <span class="token operator">=</span> <span class="token function">Visibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">/**</span>
<span class="line">     * @brief Set UI in tutorial mode.</span>
<span class="line">     * @param navigation Visibility property of navigation in tutorial mode.</span>
<span class="line">     * @param instruction Visibility property of instruction in tutorial mode.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">SetTutorial</span><span class="token punctuation">(</span>Visibility navigation <span class="token operator">=</span> <span class="token function">Visibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Visibility instruction <span class="token operator">=</span> <span class="token function">Visibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span>UI<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You need to set Sonolus UI by calling functions in <code>UI</code> class before you build engine configuration.</p><h2 id="level-data-convertor" tabindex="-1"><a class="header-anchor" href="#level-data-convertor"><span>Level Data Convertor</span></a></h2>`,55)]))}const c=s(t,[["render",p]]),r=JSON.parse('{"path":"/sonolus.h-en/basics/resources.html","title":"Resources","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1749402357000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"littleyang0531@cau.edu.cn","commits":2,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"4b96feefa5aab4c70c5b9c1d39c17f58835a6a78","time":1749402357000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"79da61286b4f0aed95b31fbedf2a0dee93419090","time":1749307539000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update Sonolus.h(English)"}]},"filePathRelative":"sonolus.h-en/basics/resources.md"}');export{c as comp,r as data};
