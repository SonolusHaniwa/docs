import{_ as e,c as d,e as o,o as c}from"./app-jaDjdgzx.js";const n={};function a(i,t){return c(),d("div",null,t[0]||(t[0]=[o('<h1 id="engine-options" tabindex="-1"><a class="header-anchor" href="#engine-options"><span>Engine Options</span></a></h1><h2 id="function-slideroption" tabindex="-1"><a class="header-anchor" href="#function-slideroption"><span><code>function</code> <code>SliderOption</code></span></a></h2><p><strong>Description</strong>: This function is used to create a <code>slider option</code> in the Sonolus app. It returns a proper <code>Variable</code> pointer pointing to a memory in the <code>LevelOption</code> or <code>PreviewOption</code> block.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>string</code></td><td><code>&quot;&quot;</code></td><td>The name of the option. Standardized names start with <code>#</code> and are translated in the client language.</td></tr><tr><td><code>description</code></td><td><code>string</code></td><td><code>&quot;&quot;</code></td><td>Description shown below the option. If not specified, it will not be displayed.</td></tr><tr><td><code>standard</code></td><td><code>bool</code></td><td><code>false</code></td><td>Indicates if the option is a standard option. See the wiki for detailed information.</td></tr><tr><td><code>advanced</code></td><td><code>bool</code></td><td><code>false</code></td><td>If <code>true</code>, the option will have a note stating it is for advanced players.</td></tr><tr><td><code>scope</code></td><td><code>string</code></td><td><code>&quot;&quot;</code></td><td>The scope of the option. Values are saved and shared between levels based on this scope.</td></tr><tr><td><code>def</code></td><td><code>double</code></td><td><code>0</code></td><td>The default value of the slider. Must be between <code>min</code> and <code>max</code>.</td></tr><tr><td><code>min</code></td><td><code>double</code></td><td><code>0</code></td><td>The minimum value of the slider. Must be less than or equal to <code>max</code>.</td></tr><tr><td><code>max</code></td><td><code>double</code></td><td><code>100</code></td><td>The maximum value of the slider. Must be greater than or equal to <code>min</code>.</td></tr><tr><td><code>step</code></td><td><code>double</code></td><td><code>1</code></td><td>The step value for the slider. Must be greater than <code>0</code>.</td></tr><tr><td><code>unit</code></td><td><code>string</code></td><td><code>&quot;&quot;</code></td><td>The unit of the slider. <code>&quot;&quot;</code> or <code>Text.PercentageUnit</code> is recommended.</td></tr></tbody></table><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>Variable</code></td><td>A <code>Variable</code> pointer depending on the current build mode.</td></tr></tbody></table><h2 id="function-toggleoption" tabindex="-1"><a class="header-anchor" href="#function-toggleoption"><span><code>function</code> <code>ToggleOption</code></span></a></h2><p><strong>Description</strong>: This function is used to create a <code>toggle option</code> in the Sonolus app. It returns a proper <code>Variable</code> pointer pointing to a memory in the <code>LevelOption</code> or <code>PreviewOption</code> block.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>string</code></td><td><code>&quot;&quot;</code></td><td>The name of the option. Standardized names start with <code>#</code> and are translated in the client language.</td></tr><tr><td><code>description</code></td><td><code>string</code></td><td><code>&quot;&quot;</code></td><td>Description shown below the option. If not specified, it will not be displayed.</td></tr><tr><td><code>standard</code></td><td><code>bool</code></td><td><code>false</code></td><td>Indicates if the option is a standard option. See the wiki for detailed information.</td></tr><tr><td><code>advanced</code></td><td><code>bool</code></td><td><code>false</code></td><td>If <code>true</code>, the option will have a note stating it is for advanced players.</td></tr><tr><td><code>scope</code></td><td><code>string</code></td><td><code>&quot;&quot;</code></td><td>The scope of the option. Values are saved and shared between levels based on this scope.</td></tr><tr><td><code>def</code></td><td><code>bool</code></td><td><code>false</code></td><td>The default value of the toggle. Only <code>true</code> or <code>false</code> is accepted.</td></tr></tbody></table><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>Variable</code></td><td>A <code>Variable</code> pointer depending on the current build mode.</td></tr></tbody></table><h2 id="function-selectoption" tabindex="-1"><a class="header-anchor" href="#function-selectoption"><span><code>function</code> <code>SelectOption</code></span></a></h2><p><strong>Description</strong>: This function is used to create a <code>select option</code> in the Sonolus app. It returns a proper <code>Variable</code> pointer pointing to a memory in the <code>LevelOption</code> or <code>PreviewOption</code> block.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>string</code></td><td><code>&quot;&quot;</code></td><td>The name of the option. Standardized names start with <code>#</code> and are translated in the client language.</td></tr><tr><td><code>description</code></td><td><code>string</code></td><td><code>&quot;&quot;</code></td><td>Description shown below the option. If not specified, it will not be displayed.</td></tr><tr><td><code>standard</code></td><td><code>bool</code></td><td><code>false</code></td><td>Indicates if the option is a standard option. See the wiki for detailed information.</td></tr><tr><td><code>advanced</code></td><td><code>bool</code></td><td><code>false</code></td><td>If <code>true</code>, the option will have a note stating it is for advanced players.</td></tr><tr><td><code>scope</code></td><td><code>string</code></td><td><code>&quot;&quot;</code></td><td>The scope of the option. Values are saved and shared between levels based on this scope.</td></tr><tr><td><code>def</code></td><td><code>int</code></td><td><code>0</code></td><td>The default value of the select. Must be between <code>0</code> and <code>values.size() - 1</code>.</td></tr><tr><td><code>values</code></td><td><code>vector&lt;string&gt;</code></td><td><code>{}</code></td><td>The list of values for the select option. Standardized values start with <code>#</code> and are translated.</td></tr></tbody></table><p><strong>Returns</strong>:</p><table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>Variable</code></td><td>A <code>Variable</code> pointer depending on the current build mode.</td></tr></tbody></table>',19)]))}const s=e(n,[["render",a]]),l=JSON.parse('{"path":"/sonolus.h-en/api/options.html","title":"Engine Options","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1754061692000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"littleyang0531@cau.edu.cn","commits":1,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"0b918d492e3c4ec530d934f3b04c4bde34651138","time":1754061692000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h-en/api/options.md"}');export{s as comp,l as data};
