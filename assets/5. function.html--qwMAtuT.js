import{_ as s,c as a,e as p,o as e}from"./app-8AMUMi4R.js";const t={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="函数与语句块" tabindex="-1"><a class="header-anchor" href="#函数与语句块"><span>函数与语句块</span></a></h1><p>在本章中，您将会学习到:</p><ul><li>定义一个 SonolusApi 函数</li><li>使用 if/for/while/switch 语句块</li></ul><h2 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义"><span>函数定义</span></a></h2><p>Sonolus 的引擎数据本身是由 json 来进行编写的，可读性非常差，这就需要 Sonolus.h 或 Sonolus.js 来辅助您将 C/C++ 或 JavaScript/TypeScript 的代码转为机器可读的 json 代码。</p><p>为了使您所编写出来的代码更具现代高级语言的风格，我们采用了侵入式写法，这导致了 Sonolus.h 中函数的定义方法不同于正常 C/C++ 函数的定义方法。</p><p>下面是基本的 C/C++ 函数的定义方法与 Sonolus.h 函数的定义方法。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">SonolusApi <span class="token function">add</span><span class="token punctuation">(</span>var a<span class="token punctuation">,</span> var b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">SonolusApi <span class="token function">add2</span><span class="token punctuation">(</span>var a<span class="token punctuation">,</span> var b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">DebugLog</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，只要是 Sonolus.h 的函数定义，返回值类型都必须是 <code>SonolusApi</code>。</p><p>接下来看具体实现上的差别。在原生 C/C++ 中，您需要指定该函数是否有返回值。但是在 Sonolus.h 中，您不需要指定是否有返回值。因为默认所有的 Sonolus.h 函数定义都是具有返回值的，如果您没有 return，解释器将默认该函数返回 <code>0</code>。</p><h2 id="语句块" tabindex="-1"><a class="header-anchor" href="#语句块"><span>语句块</span></a></h2><p>由于新版本 Sonolus.h 解释器的存在，您不再需要使用复杂的宏定义来使用语句块。您在原生 C/C++ 中使用它们的方法，在 Sonolus.h 中仍然适用。</p><p>下面是基本使用示例:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">SonolusApi <span class="token function">TestFunc</span><span class="token punctuation">(</span>var a<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">114514</span> <span class="token operator">||</span> a <span class="token operator">==</span> <span class="token number">1919810</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">DebugLog</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">114514</span> <span class="token operator">||</span> a <span class="token operator">==</span> <span class="token number">1919810</span><span class="token punctuation">)</span> <span class="token function">DebugLog</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>var i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">114514</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">1919810</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token function">DebugLog</span><span class="token punctuation">(</span><span class="token number">114514</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">DebugLog</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    var it <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>it <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">DebugLog</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        it<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">DebugLog</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">DebugLog</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token function">DebugLog</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是您需要注意的点：</p><ul><li>对于 Sonolus.h 函数中的 for 循环，默认都是 Sonolus 运行时 for 循环。如果您使用了编译期 for 循环(也就是在程序运行时执行的 for 循环，<strong>非 Sonolus 运行时</strong>)，可能会导致死循环或不执行的异常情况。</li><li>如果您想要 Sonolus.h 函数中使用编译期 for 循环，您需要在初始化语句块最前面添加 <code>CppLoop</code> 宏定义，例如 <code>for (CppLoop int i = 0; i &lt; 100; i++)</code>。</li><li>对于 switch 函数，不支持多个 case 对应一种分支的情况。</li><li>对于 switch 函数，如果您有大量 case 分支，请使用 <code>SonolusRun(Switch(...))</code> 语句，否则解释器会生成大量代码，减慢 g++ 的编译速度。</li></ul>`,16)]))}const i=s(t,[["render",o]]),u=JSON.parse('{"path":"/sonolus.h/basic/5.%20function.html","title":"函数与语句块","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1745073187000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"“littleyang0531@outlook.com”","commits":3,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"3b1b3ba269e86d6d9e8b0d2a714f42d2326eb40c","time":1745073187000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"570216e19854d31872ac0be244ab299f8df2a983","time":1745035621000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"980b354af52a1502b438a4a9259778bf62735c06","time":1720016854000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h/basic/5. function.md"}');export{i as comp,u as data};
