import{_ as a,c as n,e,o as l}from"./app-DOik5NaU.js";const p={};function t(c,s){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="区块与共享不可变数据" tabindex="-1"><a class="header-anchor" href="#区块与共享不可变数据"><span>区块与共享不可变数据</span></a></h1><p>在本章中，您将会学习到:</p><ul><li>区块的概念</li><li>如何声明区块变量</li><li>如何访问区块变量</li></ul><h2 id="区块" tabindex="-1"><a class="header-anchor" href="#区块"><span>区块</span></a></h2><p>在之前的章节中，<code>Initialization</code> 原型已经变换了我们的屏幕坐标系，以更好的满足我们引擎的需要。然而，其他原型目前还并不知道如何渲染。比如说，<code>Stage</code> 原型负责渲染判定线，也就是简单地从 <code>x = screen.l</code> 到 <code>x = screen.r</code> 画一条线，但目前它还不知道左右的界限在哪里。</p><p><code>Initialization</code> 原型拥有这些数据，并且必须将这些数据分享给其它原型，但我们该怎么做？</p><p>区块是 Sonolus 的内存共享机制，由一段简单的连续内存块组成。通过 Sonolus 提供的低级函数，您可以简单地访问这些内存块。举个例子，当我们使用 <code>EntityDespawn.set(0, true)</code> 销毁实体时，我们实际做的是调用 <code>Set</code> 低级函数，其参数指向 <code>EntityDespawn</code> 区块中的 <code>despawn</code> 标记。</p><p>Sonolus.h 抽象化了这些低级操作并将其转化为了对开发者友好的 API。</p><h2 id="leveldata-区块" tabindex="-1"><a class="header-anchor" href="#leveldata-区块"><span><code>LevelData</code> 区块</span></a></h2><p>为了达成我们的目的，我们可以使用一个区块写入任意值并且读取他们。Sonolus 有许多能够用作通用内存存储的区块，其中我们需要特别注意的一个区块就是 <code>LevelData</code> 区块。</p><p><code>LevelData</code> 区块只能在 <code>preprocess</code> 回调函数中被写入，在之后它将不允许写入，只允许读取。其不可变性会有性能上的优化，并且随后所有读取 <code>LevelData</code> 区块的操作都将作为常量内联，这使得其有更加优良的性能，更适合我们的共享不可变数据。</p><h2 id="声明" tabindex="-1"><a class="header-anchor" href="#声明"><span>声明</span></a></h2><p>我们需要让 <code>Stage</code> 原型知道新的判定线的左右边界，并让 <code>Note</code> 原型知道新的半径。让我们定义:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/constants.cpp"><span>/engine/constants.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">JudgeLine</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    Variable<span class="token operator">&lt;</span>LevelDataId<span class="token operator">&gt;</span> l<span class="token punctuation">;</span></span>
<span class="line">    Variable<span class="token operator">&lt;</span>LevelDataId<span class="token operator">&gt;</span> r<span class="token punctuation">;</span></span>
<span class="line">    Variable<span class="token operator">&lt;</span>LevelDataId<span class="token operator">&gt;</span> y<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span>judgeLine<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    Variable<span class="token operator">&lt;</span>LevelDataId<span class="token operator">&gt;</span> radius<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span>note<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="访问" tabindex="-1"><a class="header-anchor" href="#访问"><span>访问</span></a></h2><p>现在我们就可以像正常的变量一样访问他们:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Initialization.cpp"><span>/engine/play/Initialization.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Initialization</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">        judgeLine<span class="token punctuation">.</span>l <span class="token operator">=</span> screen<span class="token punctuation">.</span>l<span class="token punctuation">;</span></span>
<span class="line">        judgeLine<span class="token punctuation">.</span>r <span class="token operator">=</span> screen<span class="token punctuation">.</span>r<span class="token punctuation">;</span></span>
<span class="line">        judgeLine<span class="token punctuation">.</span>y <span class="token operator">=</span> judgeLineY<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        note<span class="token punctuation">.</span>radius <span class="token operator">=</span> noteRadius<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,17)]))}const o=a(p,[["render",t]]),d=JSON.parse('{"path":"/sonolus.h/play-old/4.%20blocks.html","title":"区块与共享不可变数据","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1745078694000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"“littleyang0531@outlook.com”","commits":4,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"cf41bee41753afa07d0ab3cd62644a45489fffce","time":1745078694000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"726af6fc9438d19f7fb5847bfcba9eb4454ab8ca","time":1720451095000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update sth"},{"hash":"cc2e831f83e429abdc0d43fd00810736a8e7e3d3","time":1720190162000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"},{"hash":"bb421886456aeed8e99566d85bb38583f372bfdb","time":1720104934000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h/play-old/4. blocks.md"}');export{o as comp,d as data};
