import{_ as t,c as a,e as o,o as d}from"./app-jaDjdgzx.js";const r={};function n(i,e){return d(),a("div",null,e[0]||(e[0]=[o('<h2 id="class-archetype" tabindex="-1"><a class="header-anchor" href="#class-archetype"><span><code>class</code> <code>Archetype</code></span></a></h2><h3 id="variable-int-id" tabindex="-1"><a class="header-anchor" href="#variable-int-id"><span><code>variable</code> <code>int</code> <code>id</code></span></a></h3><p>The unique identifier of the archetype.</p><h3 id="variable-variablesarray-entitymemoryid-memory" tabindex="-1"><a class="header-anchor" href="#variable-variablesarray-entitymemoryid-memory"><span><code>variable</code> <code>VariablesArray&lt;EntityMemoryId&gt;</code> <code>memory</code></span></a></h3><p>Generic memory storage for the entity. This is accessible only by the entity itself.</p><h3 id="variable-variablesarray-entitysharedmemoryid-sharedmemory" tabindex="-1"><a class="header-anchor" href="#variable-variablesarray-entitysharedmemoryid-sharedmemory"><span><code>variable</code> <code>VariablesArray&lt;EntitySharedMemoryId&gt;</code> <code>sharedMemory</code></span></a></h3><p>Generic shared memory storage accessible by other entities.</p><h3 id="variable-entityinfogroup-info" tabindex="-1"><a class="header-anchor" href="#variable-entityinfogroup-info"><span><code>variable</code> <code>EntityInfoGroup</code> <code>info</code></span></a></h3><p>Contains state information of the entity. This variable is read-only in all callback functions.</p><h3 id="variable-entitydespawngroup-despawn" tabindex="-1"><a class="header-anchor" href="#variable-entitydespawngroup-despawn"><span><code>variable</code> <code>EntityDespawnGroup</code> <code>despawn</code></span></a></h3><p>Used by entities to pass despawn information back to Sonolus.</p><h3 id="variable-entityinputgroup-input" tabindex="-1"><a class="header-anchor" href="#variable-entityinputgroup-input"><span><code>variable</code> <code>EntityInputGroup</code> <code>input</code></span></a></h3><p>Used by entities to pass input information back to Sonolus.</p><h3 id="variable-archetypelifegroup-life" tabindex="-1"><a class="header-anchor" href="#variable-archetypelifegroup-life"><span><code>variable</code> <code>ArchetypeLifeGroup</code> <code>life</code></span></a></h3><p>Contains life configuration of the archetype.</p><h3 id="variable-string-name" tabindex="-1"><a class="header-anchor" href="#variable-string-name"><span><code>variable</code> <code>string</code> <code>name</code></span></a></h3><p>The name of the archetype, referenced by entities in level data. Special names have specific effects:</p><ul><li><code>#BPM_CHANGE</code>: Signals a BPM change. Entities with this name must also provide data named <code>#BEAT</code> and <code>#BPM</code>.</li><li><code>#TIMESCALE_CHANGE</code>: Signals a time scale change. Entities with this name must also provide data named <code>#BEAT</code> and <code>#TIMESCALE</code>.</li></ul><h3 id="variable-bool-hasinput" tabindex="-1"><a class="header-anchor" href="#variable-bool-hasinput"><span><code>variable</code> <code>bool</code> <code>hasInput</code></span></a></h3><p>If true, entities with this archetype are considered playable and contribute to judgment, combo, life, score, etc.</p><h3 id="variable-double-preprocessorder" tabindex="-1"><a class="header-anchor" href="#variable-double-preprocessorder"><span><code>variable</code> <code>double</code> <code>preprocessOrder</code></span></a></h3><p>Determines the order of the <code>preprocess</code> callback function. Smaller values execute earlier.</p><h3 id="variable-double-spawnorderorder" tabindex="-1"><a class="header-anchor" href="#variable-double-spawnorderorder"><span><code>variable</code> <code>double</code> <code>spawnOrderOrder</code></span></a></h3><p>Determines the order of the <code>spawnOrder</code> callback function. Smaller values execute earlier.</p><h3 id="variable-double-shouldspawnorder" tabindex="-1"><a class="header-anchor" href="#variable-double-shouldspawnorder"><span><code>variable</code> <code>double</code> <code>shouldSpawnOrder</code></span></a></h3><p>Determines the order of the <code>shouldSpawn</code> callback function. Smaller values execute earlier.</p><h3 id="variable-double-initializeorder" tabindex="-1"><a class="header-anchor" href="#variable-double-initializeorder"><span><code>variable</code> <code>double</code> <code>initializeOrder</code></span></a></h3><p>Determines the order of the <code>initialize</code> callback function. Smaller values execute earlier.</p><h3 id="variable-double-updatesequentialorder" tabindex="-1"><a class="header-anchor" href="#variable-double-updatesequentialorder"><span><code>variable</code> <code>double</code> <code>updateSequentialOrder</code></span></a></h3><p>Determines the order of the <code>updateSequential</code> callback function. Smaller values execute earlier.</p><h3 id="variable-double-touchorder" tabindex="-1"><a class="header-anchor" href="#variable-double-touchorder"><span><code>variable</code> <code>double</code> <code>touchOrder</code></span></a></h3><p>Determines the order of the <code>touch</code> callback function. Smaller values execute earlier.</p><h3 id="variable-double-updateparallelorder" tabindex="-1"><a class="header-anchor" href="#variable-double-updateparallelorder"><span><code>variable</code> <code>double</code> <code>updateParallelOrder</code></span></a></h3><p>Determines the order of the <code>updateParallel</code> callback function. Smaller values execute earlier.</p><h3 id="variable-double-terminateorder" tabindex="-1"><a class="header-anchor" href="#variable-double-terminateorder"><span><code>variable</code> <code>double</code> <code>terminateOrder</code></span></a></h3><p>Determines the order of the <code>terminate</code> callback function. Smaller values execute earlier.</p><h3 id="function-preprocess" tabindex="-1"><a class="header-anchor" href="#function-preprocess"><span><code>function</code> <code>preprocess</code></span></a></h3><p><strong>Description</strong>: Callback function executed during preprocessing.</p><p><strong>Returns</strong>:</p><table><thead><tr><th>Return Type</th><th>Description</th></tr></thead><tbody><tr><td><code>SonolusApi</code></td><td>The signature of the <code>SonolusApi</code> function</td></tr></tbody></table><h3 id="function-spawnorder" tabindex="-1"><a class="header-anchor" href="#function-spawnorder"><span><code>function</code> <code>spawnOrder</code></span></a></h3><p><strong>Description</strong>: Callback function executed to determine the spawn order.</p><p><strong>Returns</strong>:</p><table><thead><tr><th>Return Type</th><th>Description</th></tr></thead><tbody><tr><td><code>SonolusApi</code></td><td>The signature of the <code>SonolusApi</code> function</td></tr></tbody></table><h3 id="function-shouldspawn" tabindex="-1"><a class="header-anchor" href="#function-shouldspawn"><span><code>function</code> <code>shouldSpawn</code></span></a></h3><p><strong>Description</strong>: Callback function executed to determine if the entity should spawn.</p><p><strong>Returns</strong>:</p><table><thead><tr><th>Return Type</th><th>Description</th></tr></thead><tbody><tr><td><code>SonolusApi</code></td><td>The signature of the <code>SonolusApi</code> function</td></tr></tbody></table><h3 id="function-initialize" tabindex="-1"><a class="header-anchor" href="#function-initialize"><span><code>function</code> <code>initialize</code></span></a></h3><p><strong>Description</strong>: Callback function executed during entity initialization.</p><p><strong>Returns</strong>:</p><table><thead><tr><th>Return Type</th><th>Description</th></tr></thead><tbody><tr><td><code>SonolusApi</code></td><td>The signature of the <code>SonolusApi</code> function</td></tr></tbody></table><h3 id="function-updatesequential" tabindex="-1"><a class="header-anchor" href="#function-updatesequential"><span><code>function</code> <code>updateSequential</code></span></a></h3><p><strong>Description</strong>: Callback function executed sequentially during each update cycle.</p><p><strong>Returns</strong>:</p><table><thead><tr><th>Return Type</th><th>Description</th></tr></thead><tbody><tr><td><code>SonolusApi</code></td><td>The signature of the <code>SonolusApi</code> function</td></tr></tbody></table><h3 id="function-touch" tabindex="-1"><a class="header-anchor" href="#function-touch"><span><code>function</code> <code>touch</code></span></a></h3><p><strong>Description</strong>: Callback function executed when <code>TouchArray</code> is not empty.</p><p><strong>Returns</strong>:</p><table><thead><tr><th>Return Type</th><th>Description</th></tr></thead><tbody><tr><td><code>SonolusApi</code></td><td>The signature of the <code>SonolusApi</code> function</td></tr></tbody></table><h3 id="function-updateparallel" tabindex="-1"><a class="header-anchor" href="#function-updateparallel"><span><code>function</code> <code>updateParallel</code></span></a></h3><p><strong>Description</strong>: Callback function executed in parallel during each update cycle.</p><p><strong>Returns</strong>:</p><table><thead><tr><th>Return Type</th><th>Description</th></tr></thead><tbody><tr><td><code>SonolusApi</code></td><td>The signature of the <code>SonolusApi</code> function</td></tr></tbody></table><h3 id="function-terminate" tabindex="-1"><a class="header-anchor" href="#function-terminate"><span><code>function</code> <code>terminate</code></span></a></h3><p><strong>Description</strong>: Callback function executed during termination of the entity.</p><p><strong>Returns</strong>:</p><table><thead><tr><th>Return Type</th><th>Description</th></tr></thead><tbody><tr><td><code>SonolusApi</code></td><td>The signature of the <code>SonolusApi</code> function</td></tr></tbody></table><h2 id="function-defineimport" tabindex="-1"><a class="header-anchor" href="#function-defineimport"><span><code>function</code> <code>defineImport</code></span></a></h2><p><strong>Description</strong>: Defines an import data for the <code>EntityData</code> block. This macro automatically allocates memory and creates a variable for the imported data.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default Value</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>string</code></td><td><em>required</em></td><td>The name of the imported data. This will be used as a variable name in the code and a key in the JSON object.</td></tr></tbody></table><h2 id="function-defineimportdetailed" tabindex="-1"><a class="header-anchor" href="#function-defineimportdetailed"><span><code>function</code> <code>defineImportDetailed</code></span></a></h2><p><strong>Description</strong>: Defines a detailed import for the <code>EntityData</code> block, allowing a custom JSON key for the import. This macro also allocates memory and creates a variable for the imported data.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default Value</th><th>Description</th></tr></thead><tbody><tr><td><code>varName</code></td><td><code>string</code></td><td><em>required</em></td><td>The name of the variable in the code.</td></tr><tr><td><code>jsonName</code></td><td><code>string</code></td><td><em>required</em></td><td>The key of the imported data in the JSON object.</td></tr></tbody></table><h2 id="function-defineexport" tabindex="-1"><a class="header-anchor" href="#function-defineexport"><span><code>function</code> <code>defineExport</code></span></a></h2><p><strong>Description</strong>: Defines an export for the replay data. This macro adds the name of the exported data to the exports list.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default Value</th><th>Description</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>string</code></td><td><em>required</em></td><td>The name of the variable in code and the exported data.</td></tr></tbody></table><h2 id="function-defineexportdetailed" tabindex="-1"><a class="header-anchor" href="#function-defineexportdetailed"><span><code>function</code> <code>defineExportDetailed</code></span></a></h2><p><strong>Description</strong>: Defines a detailed export for the replay data, allowing a custom JSON key for the export. This macro adds the export to the exports list.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default Value</th><th>Description</th></tr></thead><tbody><tr><td><code>varName</code></td><td><code>string</code></td><td><em>required</em></td><td>The name of the variable in the code.</td></tr><tr><td><code>jsonName</code></td><td><code>string</code></td><td><em>required</em></td><td>The name of the exported data in the JSON object.</td></tr></tbody></table><h2 id="function-builddata" tabindex="-1"><a class="header-anchor" href="#function-builddata"><span><code>function</code> <code>BuildData</code></span></a></h2><p><strong>Description</strong>: Finalizes and writes the engine play data into a GZIP-compressed JSON file.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default Value</th><th>Description</th></tr></thead><tbody><tr><td><code>...</code></td><td><em>archetype classes</em></td><td><em>required</em></td><td>All the names of the archetype class</td></tr></tbody></table><h2 id="function-getaid" tabindex="-1"><a class="header-anchor" href="#function-getaid"><span><code>function</code> <code>getAid</code></span></a></h2><p><strong>Description</strong>: Retrieves the identifier for a given archetype class name.</p><p><strong>Parameters</strong>:</p><table><thead><tr><th>Parameter</th><th>Type</th><th>Default Value</th><th>Description</th></tr></thead><tbody><tr><td><code>archetype</code></td><td><code>string</code></td><td><em>required</em></td><td>The name of the archetype class.</td></tr></tbody></table><p><strong>Returns</strong>:</p><table><thead><tr><th>Return Type</th><th>Description</th></tr></thead><tbody><tr><td><code>int</code></td><td>The ID of the archetype. If the archetype is not found, returns <code>-1</code>.</td></tr></tbody></table>',94)]))}const s=t(r,[["render",n]]),h=JSON.parse('{"path":"/sonolus.h-en/api/play.html","title":"","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1754061692000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"littleyang0531@cau.edu.cn","commits":1,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"0b918d492e3c4ec530d934f3b04c4bde34651138","time":1754061692000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h-en/api/play.md"}');export{s as comp,h as data};
