import{_ as o,c as a,e as s,o as t}from"./app-Tm_cs4D4.js";const n={};function c(l,e){return t(),a("div",null,e[0]||(e[0]=[s('<h1 id="sonolus-基础" tabindex="-1"><a class="header-anchor" href="#sonolus-基础"><span>Sonolus 基础</span></a></h1><p>在本章中，您将会学习到:</p><ul><li>Sonolus 引擎的基本概念</li></ul><h2 id="原型与实体" tabindex="-1"><a class="header-anchor" href="#原型与实体"><span>原型与实体</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>本段内容不适用于教程模式。</p></div><p>原型是一种实体的抽象概念，由引擎数据定义。在 Sonolus.h 中，您需要使用 <code>Archetype</code> 类的继承类来定义一种原型。</p><p>实体是一种原型的示例，由关卡数据定义。在 Sonolus.h 中，您可以通过 <code>LevelData.h</code> 中的 API 简易地生成包含多个实体的关卡数据。</p><p>在关卡初始化阶段，Sonolus 会遍历关卡数据中的实体。对于每个实体，会根据其指定的原型名生成对应原型的示例。</p><p>单个原型是由多个回调函数构成的，具体调用细节视游玩模式不同而不同。一般来说，在关卡初始化阶段，会调用每个实体的 <code>preprocess</code> 或其他回调函数，随后在游戏进行时，会以特定的顺序与时机调用剩余回调函数。</p><h2 id="数据存储" tabindex="-1"><a class="header-anchor" href="#数据存储"><span>数据存储</span></a></h2><p>在 Sonolus.h 中，数据均存储在多个由一段简单的连续内存组成的区块内。</p><p>通过 Sonolus.h 提供的低级函数，您可以简单地访问这些内存块。例如您可以通过 <code>Get(blockId, offset)</code> 函数获取 id 为 <code>blockId</code> 的区块上偏移为 <code>offset</code> 的变量，同时可以通过 <code>Set(blockId, offset, value)</code> 函数将 id 为 <code>blockId</code> 的区块上偏移为 <code>offset</code> 的变量设置为 <code>value</code>。</p><p>Sonolus.h 抽象化了这些低级操作并将其转化为了对开发者友好的 API。</p>',13)]))}const i=o(n,[["render",c]]),p=JSON.parse('{"path":"/sonolus.h/basic/2.%20sonolus.html","title":"Sonolus 基础","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1745073187000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"littleyang0531@cau.edu.cn","commits":1,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"3b1b3ba269e86d6d9e8b0d2a714f42d2326eb40c","time":1745073187000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h/basic/2. sonolus.md"}');export{i as comp,p as data};
