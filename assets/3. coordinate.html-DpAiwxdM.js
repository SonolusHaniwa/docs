import{_ as s,c as n,o as a,e}from"./app-DLMeNV68.js";const p={},l=e(`<h1 id="屏幕坐标系" tabindex="-1"><a class="header-anchor" href="#屏幕坐标系"><span>屏幕坐标系</span></a></h1><p>在本章中，您将会学习到:</p><ul><li>默认坐标系的定义</li><li>为什么变换坐标系</li><li>如何变换坐标系</li></ul><h2 id="默认坐标系" tabindex="-1"><a class="header-anchor" href="#默认坐标系"><span>默认坐标系</span></a></h2><p>Sonolus 所使用的默认坐标系，以 <code>(0, 0)</code> 为屏幕的正中心，<code>y</code> 的取值范围为 <code>-1</code> (屏幕底部) 到 <code>1</code> (屏幕顶部)，<code>x</code> 的取值范围为 <code>-1 * screen.aspectRatio</code> (屏幕左端) 到 <code>screen.aspectRatio</code> (屏幕右端)。这些值都由 <code>screen</code> 结构提供，其结构如下:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">screen</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> aspectRatio <span class="token operator">=</span> <span class="token constant">RuntimeEnvironment</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> aspectRatio<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> r <span class="token operator">=</span> aspectRatio<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> w <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> aspectRatio<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token constant">screen</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变换坐标系" tabindex="-1"><a class="header-anchor" href="#变换坐标系"><span>变换坐标系</span></a></h2><p>尽管你可以使用默认坐标系来编写引擎，但在一开始变换坐标系更能方便地迎合引擎的特殊需求。</p><p>在 VSRG (Vertical Scroll Rhythm Games，纵向滚动节奏游戏) 中，一个常用的坐标系的 <code>y</code> 取值范围为 <code>0</code> (音符生成的顶部) 到 <code>1</code> (判定线)，其中心轨道位于 <code>x = 0</code>，并且每两条轨道之间相隔一个单位距离。(例如，<code>x = 2</code> 是中心轨道右侧的第二条轨道)</p><h2 id="计算与应用" tabindex="-1"><a class="header-anchor" href="#计算与应用"><span>计算与应用</span></a></h2><p>让我们在我们的引擎中计算并应用默认坐标系。</p><p>在默认坐标系中，我们定义，我们的音符应该以 <code>0.2</code> 为它的半径，从玩家视野的外部 (<code>screen.t + radius</code>) 生成，下落至位于 <code>y = -0.6</code> 的判定线处。</p><p>由于我们并不打算变换我们的屏幕坐标系，我们可以在 <code>Initialization</code> 原型的 <code>preprocess</code> 回调函数中计算:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="/engine/play/Initialization.cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Initialization</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">SonolusApi</span> <span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">FUNCBEGIN</span></span>
<span class="line">        <span class="token keyword">let</span> noteRadius <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> judgeLineY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.6</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token constant">screen</span><span class="token punctuation">.</span>t <span class="token operator">+</span> noteRadius<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> b <span class="token operator">=</span> judgeLineY<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> h <span class="token operator">=</span> t <span class="token operator">-</span> b<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">VOID</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>个人建议如果不是很会矩阵乘法的开发者，直接使用 Sonolus 的默认坐标系即可。</p><p>Sonolus.h 并没有一个像样的矩阵类，与 Sonolus.js 相比，转换坐标系会更加困难。</p></div>`,15),t=[l];function c(o,i){return a(),n("div",null,t)}const d=s(p,[["render",c],["__file","3. coordinate.html.vue"]]),u=JSON.parse('{"path":"/sonolus.h/play/3.%20coordinate.html","title":"屏幕坐标系","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"默认坐标系","slug":"默认坐标系","link":"#默认坐标系","children":[]},{"level":2,"title":"变换坐标系","slug":"变换坐标系","link":"#变换坐标系","children":[]},{"level":2,"title":"计算与应用","slug":"计算与应用","link":"#计算与应用","children":[]}],"git":{"updatedTime":1720416884000,"contributors":[{"name":"LittleYang0531","email":"“littleyang0531@outlook.com”","commits":3}]},"filePathRelative":"sonolus.h/play/3. coordinate.md"}');export{d as comp,u as data};
