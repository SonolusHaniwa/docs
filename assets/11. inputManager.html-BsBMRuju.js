import{_ as s,c as a,e,o as p}from"./app-bKQDLgUV.js";const l={};function i(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="输入管理器" tabindex="-1"><a class="header-anchor" href="#输入管理器"><span>输入管理器</span></a></h1><p>在本章中，您将会学习到:</p><ul><li>如何设置输入管理器</li><li>如何屏蔽触摸</li></ul><h2 id="输入管理器-1" tabindex="-1"><a class="header-anchor" href="#输入管理器-1"><span>输入管理器</span></a></h2><p>目前而言，在 <code>Note</code> 原型的输入逻辑中还有最后一件缺失的东西: 当两个音符距离非常近并且用户击打了，我们只想要击打被注册在一个音符而不是两个。</p><p>这就需要有一个中心实体来协调所有的音符: <code>InputManager</code>。</p><p>让我们设置一个输入管理器，我们只需要在谱面转换器中新增一个 <code>InputManagerEntity</code> 并在游玩模式中实现即可。</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/convert.h"><span>/convert.h</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">InputManagerEntity</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">LevelEntity</span></span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">	<span class="token function">defineArchetypeName</span><span class="token punctuation">(</span><span class="token string">&quot;My Input Manager&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">string <span class="token function">fromTXT</span><span class="token punctuation">(</span>string path<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    levelData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">InputManagerEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入一个 InputManager 实体</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>由于任何带有没有实现的原型名的实体会被忽略，因此我们只需要在游玩模式中实现输入管理器，在其它模式中忽略，就可以只在游玩模式中生成了。</p><p>接下来，让我们初始化一个 <code>InputManager</code> 原型:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/InputManager.cpp"><span>/engine/play/InputManager.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">InputManager</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    string name <span class="token operator">=</span> <span class="token string">&quot;My Input Manager&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/engine.cpp"><span>/engine/engine.cpp</span></div><div class="language-diff line-numbers-mode" data-highlighter="prismjs" data-ext="diff"><pre><code class="language-diff"><span class="line">// ...</span>
<span class="line"></span>
<span class="line">#ifdef play</span>
<span class="line">using namespace playData;</span>
<span class="line">#include&quot;play/Initialization.cpp&quot;</span>
<span class="line"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> #include&quot;play/InputManager.cpp&quot;</span>
<span class="line"></span></span>#include&quot;play/Stage.cpp&quot;</span>
<span class="line">#include&quot;play/Note.cpp&quot;</span>
<span class="line">#elif tutorial</span>
<span class="line"></span>
<span class="line">// ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/main.cpp"><span>/main.cpp</span></div><div class="language-diff line-numbers-mode" data-highlighter="prismjs" data-ext="diff"><pre><code class="language-diff"><span class="line">// ...</span>
<span class="line"></span>
<span class="line">#ifdef play</span>
<span class="line"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   buffer data, configuration;</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   build&lt;</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">       // Replace with your archetypes here</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">       Initialization,</span>
<span class="line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       InputManager,</span>
<span class="line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       Stage,</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">       Note</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   &gt;(configuration, data);</span>
<span class="line"></span></span></span>
<span class="line">// ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="使用过的触摸" tabindex="-1"><a class="header-anchor" href="#使用过的触摸"><span>使用过的触摸</span></a></h2><p>为了屏蔽输入，我们可以使用一个映射表存储所有我们使用过的触摸，并在使用前检查一个触摸是否被使用过。</p><p>但我们如果共享可变数据？我们可以使用 <code>LevelMemory</code> 区块来实现:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/InputManager.cpp"><span>/engine/play/InputManager.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line">Map<span class="token operator">&lt;</span>LevelMemoryId<span class="token punctuation">,</span> var<span class="token punctuation">,</span> var<span class="token operator">&gt;</span> <span class="token function">usedTouchIds</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>现在我们可以实现两种函数来让我们与之交互:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/InputManager.cpp"><span>/engine/play/InputManager.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">auto</span> isUsed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Touch touch<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> usedTouchIds<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>touch<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">auto</span> markAsUsed <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Touch touch<span class="token punctuation">)</span><span class="token punctuation">{</span> FUNCBEGIN usedTouchIds<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>touch<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> VOID<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>最后，在每一帧里我们应该清除使用过的触摸，来让我们的映射表不会无限增长:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/InputManager.cpp"><span>/engine/play/InputManager.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">InputManager</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">touch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        usedTouchIds<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="输入屏蔽" tabindex="-1"><a class="header-anchor" href="#输入屏蔽"><span>输入屏蔽</span></a></h2><p>有了输入管理器，我们现在可以将输入屏蔽添加到 <code>Note</code> 原型的输入逻辑中了。</p><p>但首先，我们需要保证 <code>Note</code> 原型的 <code>touch</code> 回调函数会在输入管理器后执行。我们可以通过设置一个更高的序号来达成这个目的:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Note.cpp"><span>/engine/play/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> touchOrder <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>现在，输入屏蔽就是简单地检查一个触摸是否已经在之前被使用过了，并在使用时标记已使用:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Note.cpp"><span>/engine/play/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code class="language-cpp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">touch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">FOR</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> touches<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">            <span class="token function">IF</span> <span class="token punctuation">(</span><span class="token function">isUsed</span><span class="token punctuation">(</span>touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> CONTINUE<span class="token punctuation">;</span> FI</span>
<span class="line">            <span class="token function">markAsUsed</span><span class="token punctuation">(</span>touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// ...</span></span>
<span class="line">        <span class="token punctuation">}</span> DONE</span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本章节中示例的输入管理器只是最基础的输入管理器。</p><p>在实际引擎编写中，您可能需要更为复杂的输入管理器，来更好地实现输入屏蔽的功能。</p><p>当然，在有多种键型的节奏游戏中，您可能不仅需要实现击打输入管理器，还需要实现滑键输入管理器，这取决于您具体的游戏机制。</p></div>`,28)]))}const o=s(l,[["render",i]]),u=JSON.parse('{"path":"/sonolus.h/play-old/11.%20inputManager.html","title":"输入管理器","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1745078694000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"“littleyang0531@outlook.com”","commits":6,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"cf41bee41753afa07d0ab3cd62644a45489fffce","time":1745078694000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"570216e19854d31872ac0be244ab299f8df2a983","time":1745035621000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"726af6fc9438d19f7fb5847bfcba9eb4454ab8ca","time":1720451095000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update sth"},{"hash":"307d2a220f7bba82bd2e711c214715b8253a1908","time":1720416884000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Add tutorial 01"},{"hash":"132936bd91a9dc146e5935cb598d680e28d5f145","time":1720278408000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"},{"hash":"cc2e831f83e429abdc0d43fd00810736a8e7e3d3","time":1720190162000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h/play-old/11. inputManager.md"}');export{o as comp,u as data};
