import{_ as s,c as a,e,o as p}from"./app-Tm_cs4D4.js";const t={};function l(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="音符和实体数据" tabindex="-1"><a class="header-anchor" href="#音符和实体数据"><span>音符和实体数据</span></a></h1><p>在本章中，您将会学习到:</p><ul><li>如何创建音符原型</li><li>如何编写谱面转换器</li></ul><h2 id="音符原型" tabindex="-1"><a class="header-anchor" href="#音符原型"><span>音符原型</span></a></h2><p>让我们先初始化一个 <code>Note</code> 原型:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Note.cpp"><span>/engine/play/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    string name <span class="token operator">=</span> <span class="token string">&quot;My Note&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/engine.cpp"><span>/engine/engine.cpp</span></div><div class="language-diff line-numbers-mode" data-highlighter="prismjs" data-ext="diff"><pre><code><span class="line">// ...</span>
<span class="line"></span>
<span class="line">#ifdef play</span>
<span class="line">using namespace playData;</span>
<span class="line">#include&quot;play/Initialization.cpp&quot;</span>
<span class="line">#include&quot;play/Stage.cpp&quot;</span>
<span class="line"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> #include&quot;play/Note.cpp&quot;</span>
<span class="line"></span></span>#elif tutorial</span>
<span class="line"></span>
<span class="line">// ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/main.cpp"><span>/main.cpp</span></div><div class="language-diff line-numbers-mode" data-highlighter="prismjs" data-ext="diff"><pre><code><span class="line">// ...</span>
<span class="line"></span>
<span class="line">#ifdef play</span>
<span class="line"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   buffer data, configuration;</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   build&lt;</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">       // Replace with your archetypes here</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">       Initialization,</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">       Stage,</span>
<span class="line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       Note</span>
<span class="line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &gt;(configuration, data);</span>
<span class="line"></span></span></span>
<span class="line">// ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="实体数据" tabindex="-1"><a class="header-anchor" href="#实体数据"><span>实体数据</span></a></h2><p>直到现在，我们都只有 <code>Initialization</code> 原型和 <code>Stage</code> 原型，它们在所有关卡的行为都应该是一样的。</p><p>然而音符并不是那样的: 在一个关卡里，第一个音符可能在 <code>5</code> 秒处，而在另一个关卡里，第一个音符可能在 <code>2</code> 秒处; 一个关卡可以有 <code>200</code> 个音符，而在另一个关卡里可能只有 <code>30</code> 个音符。</p><p>那么引擎要如何才能处理由关卡提供的有不同数量，不同信息的音符呢？那就是 <code>EntityData</code> 发挥作用的地方。每一个关卡可以指定所有的实体并且向其注入数据。</p><p>让我们定义 <code>Note</code> 原型有一个名为 <code>time</code> 的数据，代表音符所在的时间。我们可以使用它的名字来导入数据:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Note.cpp"><span>/engine/play/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">defineImports</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>现在我们可以很轻松地访问它了。为了测试一下，让我们将它输出到日志中:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Note.cpp"><span>/engine/play/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">updateParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        <span class="token function">Debuglog</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="数据转换" tabindex="-1"><a class="header-anchor" href="#数据转换"><span>数据转换</span></a></h2><p>现在，我们该创建我们的关卡了。</p><p>在 Sonolus.js 中，并没有辅助开发者创建关卡数据的套件。但在 Sonolus.h 里，您可以很轻松地处理来自原始格式的谱面数据(例如 <code>*.sus</code> 和 <code>*.txt</code>)。</p><p>在此例中，我们假设用户提供一个很简单的文本文件，其中每行包含一个实数数据，表示音符所在的时间。</p><p>我们能够很简单地创建一个谱面转换器:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/convert.h"><span>/convert.h</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">InitializationEntity</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">LevelEntity</span></span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">	<span class="token function">defineArchetypeName</span><span class="token punctuation">(</span><span class="token string">&quot;My Initialization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">StageEntity</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">LevelEntity</span></span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">	<span class="token function">defineArchetypeName</span><span class="token punctuation">(</span><span class="token string">&quot;My Stage&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">NoteEntity</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">LevelEntity</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">defineArchetypeName</span><span class="token punctuation">(</span><span class="token string">&quot;My Note&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">defineLevelDataValue</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">string <span class="token function">fromTXT</span><span class="token punctuation">(</span>string path<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	LevelRawData levelData<span class="token punctuation">;</span></span>
<span class="line">    levelData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">InitializationEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入一个 Initialization 实体</span></span>
<span class="line">    levelData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">StageEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入一个 Stage 实体</span></span>
<span class="line"></span>
<span class="line">    ifstream <span class="token function">fin</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>fin<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">double</span> time<span class="token punctuation">;</span></span>
<span class="line">        fin <span class="token operator">&gt;&gt;</span> time<span class="token punctuation">;</span> <span class="token comment">// 读取时间</span></span>
<span class="line"></span>
<span class="line">        NoteEntity note<span class="token punctuation">;</span> <span class="token comment">// 定义一个 Note 实体</span></span>
<span class="line">        note<span class="token punctuation">.</span>time <span class="token operator">=</span> time<span class="token punctuation">;</span> <span class="token comment">// 修改实体数据</span></span>
<span class="line">        levelData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>note<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 插入该实体</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    fin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">json_encode</span><span class="token punctuation">(</span>levelData<span class="token punctuation">.</span><span class="token function">toJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出为 json 数据</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>现在，我们需要给我们的程序提供能够转换谱面的接口，这也很容易实现:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/main.cpp"><span>/main.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        string txtPath <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dataPath <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 从命令行获取文件路径</span></span>
<span class="line">        string rawData <span class="token operator">=</span> <span class="token function">fromTXT</span><span class="token punctuation">(</span>txtPath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换谱面为 json 格式</span></span>
<span class="line">        string data <span class="token operator">=</span> <span class="token function">compress_gzip</span><span class="token punctuation">(</span>rawData<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 压缩 json 数据，转为 LevelData 数据</span></span>
<span class="line">        ofstream <span class="token function">fout</span><span class="token punctuation">(</span>dataPath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 LevelData</span></span>
<span class="line">        fout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        fout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 直接退出程序，避免再生成一次引擎数据，浪费时间</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>接下来，在引擎根目录下创建一个文件 <code>chart.txt</code>，并向其中写入音符数据。然后修改 <code>package.json</code> 中的测试关卡信息，并向关卡信息中的 <code>generate</code> 选项填写 <code>chart.txt dist/LevelData</code>，编译引擎后用 Sonolus 打开便可以看到您所创建的关卡了。</p>`,25)]))}const o=s(t,[["render",l]]),u=JSON.parse('{"path":"/sonolus.h/play/6.%20note.html","title":"音符和实体数据","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1745035621000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"“littleyang0531@outlook.com”","commits":7,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"570216e19854d31872ac0be244ab299f8df2a983","time":1745035621000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"2bb0932bf53f106d48f40985e95f7580428809bf","time":1721830258000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update Preview Mode"},{"hash":"726af6fc9438d19f7fb5847bfcba9eb4454ab8ca","time":1720451095000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update sth"},{"hash":"307d2a220f7bba82bd2e711c214715b8253a1908","time":1720416884000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Add tutorial 01"},{"hash":"7f13429673ffc5b1dca011868f671ca020b42e65","time":1720364737000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"},{"hash":"132936bd91a9dc146e5935cb598d680e28d5f145","time":1720278408000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"},{"hash":"cc2e831f83e429abdc0d43fd00810736a8e7e3d3","time":1720190162000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h/play/6. note.md"}');export{o as comp,u as data};
