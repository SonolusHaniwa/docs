import{_ as n,c as a,e,o as p}from"./app-Tm_cs4D4.js";const i={};function l(c,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="音符与面板数量" tabindex="-1"><a class="header-anchor" href="#音符与面板数量"><span>音符与面板数量</span></a></h1><p>在本章中，您将会学习到:</p><ul><li>如何设置音符原型</li><li>持续时间的计算</li><li>面板数量的计算</li><li>画布大小的更新</li></ul><h2 id="音符原型" tabindex="-1"><a class="header-anchor" href="#音符原型"><span>音符原型</span></a></h2><p>让我们首先设置音符原型：</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/preview/Note.cpp"><span>/engine/preview/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    string name <span class="token operator">=</span> <span class="token string">&quot;My Note&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/engine.cpp"><span>/engine/engine.cpp</span></div><div class="language-diff line-numbers-mode" data-highlighter="prismjs" data-ext="diff"><pre><code><span class="line">// ...</span>
<span class="line"></span>
<span class="line">#ifdef preview</span>
<span class="line">using namespace previewData;</span>
<span class="line">#include&quot;preview/Initialization.cpp&quot;</span>
<span class="line">#include&quot;preview/Stage.cpp&quot;</span>
<span class="line"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> #include&quot;preview/Note.cpp&quot;</span>
<span class="line"></span></span>#elif watch</span>
<span class="line"></span>
<span class="line">// ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/main.cpp"><span>/main.cpp</span></div><div class="language-diff line-numbers-mode" data-highlighter="prismjs" data-ext="diff"><pre><code><span class="line">// ...</span>
<span class="line"></span>
<span class="line">#ifdef preview</span>
<span class="line"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   buffer data, configuration;</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   build&lt;</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">       // Replace with your archetypes here</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">       Initialization,</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">       Stage,</span>
<span class="line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       Note</span>
<span class="line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &gt;(configuration, data);</span>
<span class="line"></span></span></span>
<span class="line">// ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="持续时间" tabindex="-1"><a class="header-anchor" href="#持续时间"><span>持续时间</span></a></h2><p>如果我们知道了持续时间，我们就可以用它来计算面板数量。</p><p>那么我们如何获取持续时间呢？一个简单的方法就是使用一个变量存储一个关卡的时长，并在我们访问音符时更新它。</p><p>让我们使用 Preview Data 区块声明它：</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/constants.cpp"><span>/engine/constants.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">preview</span></span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">chart</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    Variable<span class="token operator">&lt;</span>PreviewDataId<span class="token operator">&gt;</span> duration<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span>chart<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="更新持续时间" tabindex="-1"><a class="header-anchor" href="#更新持续时间"><span>更新持续时间</span></a></h2><p>为了计算音符时间，我们需要知道它的节拍。我们可以像游玩模式一样声明它：</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/preview/Note.cpp"><span>/engine/preview/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">defineImports</span><span class="token punctuation">(</span>beat<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>在音符原型的 <code>preprocess</code> 回调函数中，如果音符时间更大，我们将更新持续时间：</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/preview/Note.cpp"><span>/engine/preview/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        chart<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token function">Max</span><span class="token punctuation">(</span>chart<span class="token punctuation">.</span>duration<span class="token punctuation">,</span> <span class="token function">BeatToTime</span><span class="token punctuation">(</span>beat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="面板数量" tabindex="-1"><a class="header-anchor" href="#面板数量"><span>面板数量</span></a></h2><p>现在我们可以根据持续时间计算并更新面板数量：</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/constants.cpp"><span>/engine/constants.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">preview</span></span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">panel</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">Ceil</span><span class="token punctuation">(</span>chart<span class="token punctuation">.</span>duration <span class="token operator">/</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span>panel<span class="token punctuation">;</span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="画布" tabindex="-1"><a class="header-anchor" href="#画布"><span>画布</span></a></h2><p>最后，我们需要在所有音符都更新持续时间完成后，确保计算画布大小代码的正常执行。</p><p>我们可以将代码移动到舞台原型的 <code>preprocess</code> 回调函数并给予其一个更高的顺序：</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/preview/Stage.cpp"><span>/engine/preview/Stage.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Stage</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> preprocessOrder <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    SonolusApi <span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        canvas<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span></span>
<span class="line">            Scroll<span class="token punctuation">.</span>LeftToRight<span class="token punctuation">,</span> </span>
<span class="line">            panel<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> panel<span class="token punctuation">.</span>w <span class="token operator">*</span> screen<span class="token punctuation">.</span>h <span class="token operator">/</span> <span class="token number">20</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,25)]))}const o=n(i,[["render",l]]),d=JSON.parse('{"path":"/sonolus.h/preview/4.%20note.html","title":"音符与面板数量","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1745035621000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"“littleyang0531@outlook.com”","commits":2,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"570216e19854d31872ac0be244ab299f8df2a983","time":1745035621000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"2bb0932bf53f106d48f40985e95f7580428809bf","time":1721830258000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update Preview Mode"}]},"filePathRelative":"sonolus.h/preview/4. note.md"}');export{o as comp,d as data};
