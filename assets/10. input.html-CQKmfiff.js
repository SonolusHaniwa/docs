import{_ as s,c as a,e,o as p}from"./app-SvzghQPM.js";const l={};function t(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="音符输入" tabindex="-1"><a class="header-anchor" href="#音符输入"><span>音符输入</span></a></h1><p>在本章中，您将会学习到:</p><ul><li>如何处理玩家输入</li><li>判定窗口的概念与设置</li><li>输入偏移的处理</li></ul><h2 id="基础输入" tabindex="-1"><a class="header-anchor" href="#基础输入"><span>基础输入</span></a></h2><p>让我们先实现非常基础的输入交互: 如果玩家点击，音符消失。</p><p>在 <code>touch</code> 回调函数中，我们可以遍历 <code>touches</code> 来寻找刚开始的触摸。如果找到，销毁音符并返回。</p><p>为了防止音符在准备销毁的那一帧的 <code>updatePatallel</code> 回调函数中仍然被绘制，我们需要添加一个简单的销毁检查:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Note.cpp"><span>/engine/play/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">touch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        <span class="token function">FOR</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> touches<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">IF</span> <span class="token punctuation">(</span><span class="token operator">!</span>touches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>started<span class="token punctuation">)</span> CONTINUE<span class="token punctuation">;</span> FI</span>
<span class="line">            EntityDespawn<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">Return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> DONE</span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">updateParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        <span class="token function">IF</span> <span class="token punctuation">(</span>EntityDespawn<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">Return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> FI</span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>实际上，Sonolus 的性能优化做的非常好，基本上所有支持的设备在游玩任意引擎时都能达到至少 <code>60</code> 帧。</p><p>在这种情况下，即使在 <code>updateParallel</code> 回调函数中不做销毁检查，玩家看上去也没有太大区别。</p></div><h2 id="判定窗口" tabindex="-1"><a class="header-anchor" href="#判定窗口"><span>判定窗口</span></a></h2><p>虽然我们的引擎现在开始工作了，但它绝对不像正常的节奏游戏那样工作。</p><p>一个音符当且仅当当前时间在音符的判定窗口时才能被击打: 如果时间太早，击打不会触发判定; 如果时间太晚，这将会被判定为 Miss 并且音符会自行销毁。</p><p>对我们的引擎来说，让我们定义，当你在目标时间 <code>50ms</code> 以内击打时，你将获得 Perfect 判定; <code>100ms</code> 以内会获得 Great 判定; <code>200ms</code> 以内会获得 Good 判定; 如果偏差时间更大，将不会触发判定或是获得 Miss 判定。</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/constants.cpp"><span>/engine/constants.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    let minPerfect <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.05</span><span class="token punctuation">;</span></span>
<span class="line">    let maxPerfect <span class="token operator">=</span> <span class="token number">0.05</span><span class="token punctuation">;</span></span>
<span class="line">    let minGreat <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.1</span><span class="token punctuation">;</span></span>
<span class="line">    let maxGreat <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span></span>
<span class="line">    let minGood <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">;</span></span>
<span class="line">    let maxGood <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span>windows<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="输入偏移" tabindex="-1"><a class="header-anchor" href="#输入偏移"><span>输入偏移</span></a></h2><p>当玩家物理上触摸屏幕时，在此次输入在 Sonolus 里被注册并广播到所有的 <code>touch</code> 回调函数前有一些延迟。这很可能来自硬件的延迟并且无可避免。</p><p>输入偏移可以允许玩家告诉 Sonolus 将这部分时间考虑在内。</p><p>举个例子，玩家在 <code>00:01.00</code> 时触摸了屏幕，但需要花费一些时间并在 <code>00:01.06</code> 被 <code>touch</code> 回调函数检测到。如果玩家正确校准了他们的输入并给您 <code>0.06</code> 的输入偏移，引擎就可以将其从触摸时间上减去，并基于他们真实的触摸时间 <code>00:01.00</code> 正确判定玩家输入。</p><p>Sonolus 提供的触摸时间已经考虑了输入偏移。然而，涉及到其它方面的输入偏移，引擎仍需要手动考虑它们，并确保给与所有玩家一个公平的游玩体验。</p><h2 id="过早输入" tabindex="-1"><a class="header-anchor" href="#过早输入"><span>过早输入</span></a></h2><p>让我们计算一下玩家能够击打的最早时间:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Note.cpp"><span>/engine/play/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    Variable<span class="token operator">&lt;</span>EntityMemoryId<span class="token operator">&gt;</span> minInputTime<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        minInputTime <span class="token operator">=</span> targetTime <span class="token operator">+</span> windows<span class="token punctuation">.</span>minGood <span class="token operator">+</span> RuntimeEnvironment<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>接下来我们需要让 <code>touch</code> 回调函数只会在最小输入时间后执行:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Note.cpp"><span>/engine/play/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">touch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        <span class="token function">IF</span> <span class="token punctuation">(</span>times<span class="token punctuation">.</span>now <span class="token operator">&lt;</span> minInputTime<span class="token punctuation">)</span> <span class="token function">Return</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> FI</span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="过晚输入" tabindex="-1"><a class="header-anchor" href="#过晚输入"><span>过晚输入</span></a></h2><p>与过早输入类似，让我们计算一下玩家能够击打的最晚时间:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Note.cpp"><span>/engine/play/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    Variable<span class="token operator">&lt;</span>EntityMemoryId<span class="token operator">&gt;</span> maxInputTime<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">        maxInputTime <span class="token operator">=</span> targetTime <span class="token operator">+</span> windows<span class="token punctuation">.</span>maxGood <span class="token operator">+</span> RuntimeEnvironment<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>如果时间已经超过最大输入时间，我们应该让音符自动销毁:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Note.cpp"><span>/engine/play/Note.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Note</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">updateParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        <span class="token function">IF</span> <span class="token punctuation">(</span>times<span class="token punctuation">.</span>now <span class="token operator">&gt;</span> maxInputTime<span class="token punctuation">)</span> EntityDespawn<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> FI</span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,29)]))}const o=s(l,[["render",t]]),u=JSON.parse('{"path":"/sonolus.h/play/10.%20input.html","title":"音符输入","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1720451095000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"“littleyang0531@outlook.com”","commits":3,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"726af6fc9438d19f7fb5847bfcba9eb4454ab8ca","time":1720451095000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update sth"},{"hash":"307d2a220f7bba82bd2e711c214715b8253a1908","time":1720416884000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Add tutorial 01"},{"hash":"cc2e831f83e429abdc0d43fd00810736a8e7e3d3","time":1720190162000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h/play/10. input.md"}');export{o as comp,u as data};
