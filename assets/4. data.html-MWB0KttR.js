import{_ as a,c as s,e as n,o as l}from"./app-8AMUMi4R.js";const o={};function c(i,e){return l(),s("div",null,e[0]||(e[0]=[n(`<h1 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h1><p>在本章中，您将会学习到:</p><ul><li>Sonolus.h 的基本数据类型</li></ul><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>我们预定义了部分基本数据类型，如下:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">var</span>
<span class="line">Array<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> size<span class="token operator">&gt;</span></span>
<span class="line">Collection<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> size<span class="token operator">&gt;</span>                           <span class="token comment">// 等同于 C++ 中的 vector</span></span>
<span class="line">Dictionary<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> size<span class="token operator">&gt;</span> <span class="token operator">=</span> Map<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> size<span class="token operator">&gt;</span>  <span class="token comment">// 等同于 C++ 中的 map</span></span>
<span class="line">Matrix <span class="token operator">=</span> Mat</span>
<span class="line">Quadratic <span class="token operator">=</span> Quad</span>
<span class="line">Range <span class="token operator">=</span> Rg</span>
<span class="line">Rectangle <span class="token operator">=</span> Rect</span>
<span class="line">Vector <span class="token operator">=</span> Vec                                  <span class="token comment">// 并非 C++ 中的 vector</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>var</code><ul><li>基础变量类型。</li><li>变量存储的区块将会根据用户代码自动调整，目前只会自动分配 <code>LevelMemory</code>, <code>EntityMemory</code> 和 <code>TemporaryMemory</code> 三个区块的内存。如果需要自行指定区块和偏移，请使用 <code>var a = var(EntitySharedMemory, offset);</code> 定义变量。</li><li>如果需要更换自动分配的区块 id，请修改 <code>OptionId</code> 全局变量，并在分配完后记得将 <code>OptionId</code> 修改回去！</li></ul></li><li><code>Array&lt;T, size&gt;</code><ul><li>定长数组类型。会根据 <code>T</code> 和 <code>OptionId</code> 自动分配内存。</li><li>支持自定义 class 作为 <code>T</code> 模板参数。</li></ul></li><li><code>Collection&lt;T, size&gt;</code><ul><li>不定长数组类型。通过 <code>size</code> 指定预分配 <code>T</code> 数量。</li><li>支持自定义 class 作为 <code>T</code> 模板参数。</li></ul></li><li><code>Dictionary&lt;T1, T2, size&gt;</code><ul><li>键值对类型。通过 <code>size</code> 指定预分配 <code>T1</code>, <code>T2</code> 对数量。</li><li>支持自定义 class 作为 <code>T</code> 模板参数。</li></ul></li><li><code>Matrix</code><ul><li><code>4x4</code> 矩阵类型。内部通过二维 <code>Array</code> 实现。</li><li>可通过 <code>Matrix.m[i][j]</code> 获取/修改矩阵第 <code>i</code> 行第 <code>j</code> 列的数据。</li></ul></li><li><code>Quadratic</code><ul><li>四边形类型。内部通过两个 <code>Array</code> 实现。</li><li>可通过 <code>Quadratic.x[i]</code>/<code>Quadratic.y[i]</code> 获取/修改第 <code>i</code> 个顶点坐标。</li></ul></li><li><code>Range</code><ul><li>范围类型。内部通过 <code>var min, max</code> 实现。</li></ul></li><li><code>Rectangle</code><ul><li>矩形类型。内部通过 <code>var l, b, r, t</code> 实现。</li></ul></li><li><code>Vector</code><ul><li><code>Vector2D</code> 类型。内部通过 <code>var x, y</code> 实现。</li></ul></li></ul>`,7)]))}const d=a(o,[["render",c]]),p=JSON.parse('{"path":"/sonolus.h/basic/4.%20data.html","title":"基本数据类型","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1745073187000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"“littleyang0531@outlook.com”","commits":3,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"3b1b3ba269e86d6d9e8b0d2a714f42d2326eb40c","time":1745073187000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"570216e19854d31872ac0be244ab299f8df2a983","time":1745035621000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"980b354af52a1502b438a4a9259778bf62735c06","time":1720016854000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h/basic/4. data.md"}');export{d as comp,p as data};
