import{_ as a,c as s,e,o as c}from"./app-BijJ-2Ex.js";const p={};function o(t,n){return c(),s("div",null,n[0]||(n[0]=[e(`<h1 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h1><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>我们预定义了部分基本数据类型，如下:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line">var</span>
<span class="line">Array<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> size<span class="token operator">&gt;</span></span>
<span class="line">Collection<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> size<span class="token operator">&gt;</span>                             <span class="token comment">// 等同于 C++ 中的 vector</span></span>
<span class="line">Dictionary<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> size<span class="token operator">&gt;</span> <span class="token operator">=</span> Map<span class="token operator">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">,</span> size<span class="token operator">&gt;</span>    <span class="token comment">// 等同于 C++ 中的 map</span></span>
<span class="line">Matrix <span class="token operator">=</span> Mat</span>
<span class="line">Quadratic <span class="token operator">=</span> Quad</span>
<span class="line">Range <span class="token operator">=</span> Rg</span>
<span class="line">Rectangle <span class="token operator">=</span> Rect</span>
<span class="line">Vector <span class="token operator">=</span> Vec                                    <span class="token comment">// 并非 C++ 中的 vector</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>var</code><ul><li>基础变量类型。</li><li>变量存储的区块将会根据用户代码自动调整，目前只会自动分配 <code>LevelMemory</code>, <code>EntityMemory</code> 和 <code>TemporaryMemory</code> 三个区块的内存。如果需要自行指定区块和偏移，请使用 <code>var a = var(EntitySharedMemory, offset);</code> 定义变量。</li><li>如果需要更换自动分配的区块 id，请修改 <code>OptionId</code> 全局变量，并在分配完后记得将 <code>OptionId</code> 修改回去！</li></ul></li><li><code>Array&lt;T, size&gt;</code><ul><li>定长数组类型。会根据 <code>T</code> 和 <code>OptionId</code> 自动分配内存。</li><li>支持自定义 class 作为 <code>T</code> 模板参数。</li></ul></li><li><code>Collection&lt;T, size&gt;</code><ul><li>不定长数组类型。通过 <code>size</code> 指定预分配 <code>T</code> 数量。</li><li>支持自定义 class 作为 <code>T</code> 模板参数。</li></ul></li><li><code>Dictionary&lt;T1, T2, size&gt;</code><ul><li>键值对类型。通过 <code>size</code> 指定预分配 <code>T1</code>, <code>T2</code> 对数量。</li><li>支持自定义 class 作为 <code>T</code> 模板参数。</li></ul></li><li><code>Matrix</code><ul><li><code>4x4</code> 矩阵类型。内部通过二维 <code>Array</code> 实现。</li><li>可通过 <code>Matrix.m[i][j]</code> 获取/修改矩阵第 <code>i</code> 行第 <code>j</code> 列的数据。</li></ul></li><li><code>Quadratic</code><ul><li>四边形类型。内部通过两个 <code>Array</code> 实现。</li><li>可通过 <code>Quadratic.x[i]</code>/<code>Quadratic.y[i]</code> 获取/修改第 <code>i</code> 个顶点坐标。</li></ul></li><li><code>Range</code><ul><li>范围类型。内部通过 <code>var min, max</code> 实现。</li></ul></li><li><code>Rectangle</code><ul><li>矩形类型。内部通过 <code>var l, b, r, t</code> 实现。</li></ul></li><li><code>Vector</code><ul><li><code>Vector2D</code> 类型。内部通过 <code>var x, y</code> 实现。</li></ul></li></ul><h2 id="var-变量" tabindex="-1"><a class="header-anchor" href="#var-变量"><span><code>var</code> 变量</span></a></h2><p>在 Sonolus.h 中，我们提供了 <code>var</code> 类型来简化开发者的数据存储过程。</p><p><code>var</code> 类型内部包含两个成员变量，<code>allocatorId</code>(区块id) 以及 <code>index</code>(数据偏移)。</p><p>您可以将 Sonolus 的单个区块看成一大块连续内存，<code>var</code> 类型即为指向该区块中偏移为 <code>index</code> 内存的指针。</p><p><code>var</code> 类型的构造函数如下:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token function">var</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token comment">// 在默认区块上分配一块内存</span></span>
<span class="line"><span class="token function">var</span><span class="token punctuation">(</span>FuncNode value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 在默认区块上分配一块内存并赋值</span></span>
<span class="line"><span class="token function">var</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// 在默认区块上分配一块内存并赋值</span></span>
<span class="line"><span class="token function">var</span><span class="token punctuation">(</span><span class="token keyword">int</span> blockId<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 直接定义一个指针，指向指定区块的指定偏移，不分配内存</span></span>
<span class="line"><span class="token function">var</span><span class="token punctuation">(</span><span class="token keyword">int</span> blockId<span class="token punctuation">,</span> FuncNode index<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 直接定义一个指针，指向指定区块的指定偏移，不分配内存</span></span>
<span class="line"><span class="token function">var</span><span class="token punctuation">(</span><span class="token keyword">const</span> var <span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 分配一块内存并进行拷贝</span></span>
<span class="line"><span class="token function">var</span><span class="token punctuation">(</span><span class="token keyword">const</span> var <span class="token operator">&amp;</span>value<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 直接定义一个指针，其指向的偏移为 value.index + offset。不分配内存</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于前三种构造方法，根据 <code>var</code> 类型被定义的位置不同，可以将 <code>var</code> 变量大致定义为三种类型: 原型外全局变量，原型内全局变量，函数局部变量。</p><p><strong><code>var</code> 类型变量几乎支持所有的操作符运算，这意味着您完全可以将 <code>var</code> 类型看作 C/C++ 中的 <code>double</code> 类型并正常编写代码。</strong></p><p>对于取模运算，C/C++ 中的 <code>double</code> 类型是不支持的，但是 Sonolus 支持且将该运算扩展到了实数域，其结果应等同于 <code>x % y = x - y * Ceil(x / y)</code> 而非乘法逆元的运算结果。这在一些运算中非常有用。</p><h3 id="原型外全局变量" tabindex="-1"><a class="header-anchor" href="#原型外全局变量"><span>原型外全局变量</span></a></h3><p>原型外全局变量是在所有原型外部定义的全局变量，其默认分配的区块 id 为 <code>LevelMemoryId</code>/<code>TutorialMemoryId</code>/<code>PreviewDataId</code>/<code>LevelMemoryId</code>。</p><p>在定义原型外全局变量时，不允许使用赋值操作。您只能通过 <code>var a;</code> 或 <code>var a = var(blockId, index);</code> 或 <code>var a = var(b, offset)</code> 的方式初始化变量，否则会出现 <code>&#39;%s&#39; block is not writable in &#39;&#39; callback at &#39;&#39; archetype!</code> 的报错。</p><h3 id="原型内全局变量" tabindex="-1"><a class="header-anchor" href="#原型内全局变量"><span>原型内全局变量</span></a></h3><p>原型内全局变量是定义在单一原型内部的全局变量，其默认分配的区块 id 为 <code>EntityMemoryId</code>/<code>-</code>/<code>EntitySharedMemoryId</code>/<code>EntityMemoryId</code>。</p><p>在定义原型内全局变量时，同样不允许使用赋值操作。您只能通过 <code>var a;</code> 或 <code>var a = var(blockId, index);</code> 或 <code>var a = var(b, offset)</code> 的方式初始化变量，否则会出现 <code>&#39;%s&#39; block is not writable in &#39;%s&#39; callback at &#39;%s&#39; archetype!</code> 的报错。其中 <code>callback</code> 名和 <code>archetype</code> 并非真实的回调函数和原型名，应为上一个回调函数和原型名。</p><h3 id="函数局部变量" tabindex="-1"><a class="header-anchor" href="#函数局部变量"><span>函数局部变量</span></a></h3><p>函数局部变量是定义在函数内部的局部变量，其默认分配的区块 id 均为 <code>TemporaryMemoryId</code>。</p><p>函数局部变量的定义<strong>可以使用赋值操作</strong>。您在进行赋值操作的时候需要注意回调函数是否具有该区块的写入权限，否则会出现 <code>&#39;%s&#39; block is not writable in &#39;%s&#39; callback at &#39;%s&#39; archetype!</code> 的报错。其中 <code>callback</code> 名和 <code>archetype</code> <strong>均为</strong>真实的回调函数和原型名。</p><h3 id="样例" tabindex="-1"><a class="header-anchor" href="#样例"><span>样例</span></a></h3><p>以下代码展示了三种变量的定义方法和使用方法。</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token comment">// 定义原型外全局变量</span></span>
<span class="line">var a<span class="token punctuation">;</span></span>
<span class="line">var b <span class="token operator">=</span> <span class="token function">var</span><span class="token punctuation">(</span>LevelDataId<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">var c <span class="token operator">=</span> <span class="token function">var</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 原型定义</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    string name <span class="token operator">=</span> <span class="token string">&quot;Test Archetype&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">bool</span> hasInput <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 定义原型内全局变量</span></span>
<span class="line">    var d<span class="token punctuation">;</span></span>
<span class="line">    var e <span class="token operator">=</span> <span class="token function">var</span><span class="token punctuation">(</span>EntitySharedMemoryId<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    var f <span class="token operator">=</span> <span class="token function">var</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">preprocess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 按需修改原型外全局变量和原型内全局变量</span></span>
<span class="line">        a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">        d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 定义函数局部变量</span></span>
<span class="line">        var g <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        var h <span class="token operator">=</span> <span class="token function">var</span><span class="token punctuation">(</span>TemporaryMemoryId<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        var i <span class="token operator">=</span> <span class="token function">var</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        var j <span class="token operator">=</span> g <span class="token operator">*</span> h <span class="token operator">+</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26)]))}const i=a(p,[["render",o]]),d=JSON.parse('{"path":"/sonolus.h/basic/4.%20data.html","title":"基本数据类型","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1745767057000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"“littleyang0531@outlook.com”","commits":4,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"dcbb26ffce1c79b5898039889207b9a274cdab0b","time":1745767057000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"3b1b3ba269e86d6d9e8b0d2a714f42d2326eb40c","time":1745073187000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"570216e19854d31872ac0be244ab299f8df2a983","time":1745035621000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"980b354af52a1502b438a4a9259778bf62735c06","time":1720016854000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h/basic/4. data.md"}');export{i as comp,d as data};
