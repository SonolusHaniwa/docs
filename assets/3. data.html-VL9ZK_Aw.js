import{_ as n,c as s,o as a,e}from"./app-DoacbZsq.js";const l={},p=e(`<h1 id="基本数据类型及扩展" tabindex="-1"><a class="header-anchor" href="#基本数据类型及扩展"><span>基本数据类型及扩展</span></a></h1><p>在本章中，您将会学习到:</p><ul><li>Sonolus.h 的基本数据类型</li><li>自定义数据类型</li></ul><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>我们预定义了部分基本数据类型，如下:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="line"><span class="token keyword">let</span> a<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> a<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">Variable</span><span class="token operator">&lt;</span><span class="token constant">EntityMemoryId</span><span class="token operator">&gt;</span> a<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token constant">EntityMemoryId</span><span class="token punctuation">,</span> <span class="token keyword">let</span><span class="token operator">&gt;</span> <span class="token function">touchIndex</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">Map</span><span class="token operator">&lt;</span><span class="token constant">EntityMemoryId</span><span class="token punctuation">,</span> <span class="token keyword">let</span><span class="token punctuation">,</span> <span class="token keyword">let</span><span class="token operator">&gt;</span> <span class="token function">touchUsed</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CustomClass</span> a <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>let</code><ul><li>表达式类型，存储一整个表达式块。</li><li>每次运算到这个变量时都会重新计算一次这个变量的值。</li><li>建议将该类型用于一些简单的计算中。</li></ul></li><li><code>var</code><ul><li>变量类型，存储一个计算好的结果，与 C/C++ 中的 double 类似。</li><li>可与 <code>let</code> 类型任意互转。</li><li>建议将该类型用于一些复杂的运算以加快速度。</li></ul></li><li><code>Variable&lt;BlockId&gt;</code><ul><li>变量类型，同 <code>var</code>。</li><li>唯一的差别就是该类型可以指定变量存储位置，而 <code>var</code> 只能被存储到 <code>TemporaryMemory</code> 块中。</li></ul></li><li><code>Array&lt;BlockId, Type&gt;(size)</code><ul><li>数组类型，在 <code>Block</code> 中开辟一块空间，存储 <code>size</code> 个 <code>Type</code> 类型的变量。</li><li>其中 <code>Type</code> 只能为 <code>let</code>/<code>var</code>/<code>Variable&lt;BlockId&gt;</code>/<code>CustomClass</code> 中的一种。</li><li>由于未经过详细的测试, <code>CustomClass</code> 作为第二参数传入，在使用时可能会出现 bug，请及时反馈给我们，我们会尽快处理！</li></ul></li><li><code>Map&lt;BlockId, Type1, Type2&gt;(size)</code><ul><li>键值对类型，在 <code>Block</code> 中开辟一块空间，存储 <code>size</code> 个 <code>pair&lt;Type1, Type2&gt;</code> 变量。</li><li><code>Type1</code>/<code>Type2</code> 的限制如 <code>Array</code> 中对 <code>Type</code> 的限制。</li><li>使用方法如 C/C++ 中的 STL 结构 <code>map</code>。</li></ul></li><li><code>CustomClass a { ... }</code><ul><li>请参照后续章节。</li></ul></li></ul><h2 id="自定义数据类型" tabindex="-1"><a class="header-anchor" href="#自定义数据类型"><span>自定义数据类型</span></a></h2><p>我们深知，仅仅是这些基本数据类型，完全不足以您的使用。因此我们提供了自定义数据类型结构，供您使用。</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>注意：接下来的内容为实验性内容，请谨慎使用。如有问题，请及时反馈给我们，我们会尽快处理！</p></div><p>下面是自定义数据类型的基本用法:</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre class="language-cpp"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Coordinate</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">CLASSBEGIN</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">defineVar</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">defineVar</span><span class="token punctuation">(</span><span class="token keyword">var</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">SonolusApi</span> <span class="token function">getDistance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">FUNCBEGIN</span></span>
<span class="line">        <span class="token function">Return</span><span class="token punctuation">(</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>x <span class="token operator">*</span> x <span class="token operator">+</span> y <span class="token operator">*</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token constant">VAR</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类定义方法与 C/C++ 大致类似，下面是 Sonolus.h 类的不同点:</p><ul><li>在每个自定义类的第一行，都需要添加 <code>CLASSBEGIN</code> 来标识这是一个 Sonolus.h 类</li><li>在 Sonolus.h 类中，您不可以使用 <code>public</code>/<code>private</code> 修饰符</li><li>定义变量时，如果使用 <code>defineVar(Type, Name, Value)</code> 来定义，在 <code>Array</code> 和 <code>Map</code> 中这个变量将会被捕获并存储在内存中，否则就只是一个普通的 C/C++ 变量。</li><li>可以在类里定义普通变量/函数。</li><li>不能使用类继承功能。</li></ul>`,14),o=[p];function t(c,i){return a(),s("div",null,o)}const u=n(l,[["render",t],["__file","3. data.html.vue"]]),r=JSON.parse('{"path":"/sonolus.h/basic/3.%20data.html","title":"基本数据类型及扩展","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"自定义数据类型","slug":"自定义数据类型","link":"#自定义数据类型","children":[]}],"git":{"updatedTime":1720016854000,"contributors":[{"name":"LittleYang0531","email":"“littleyang0531@outlook.com”","commits":1}]},"filePathRelative":"sonolus.h/basic/3. data.md"}');export{u as comp,r as data};
