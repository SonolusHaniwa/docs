import{_ as s,c as a,e,o as p}from"./app-Tm_cs4D4.js";const l={};function i(t,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="舞台" tabindex="-1"><a class="header-anchor" href="#舞台"><span>舞台</span></a></h1><p>在本章中，您将会学习到:</p><ul><li>什么是皮肤精灵</li><li>如何声明皮肤精灵</li><li>如何绘制判定线</li><li>如何让判定线响应触摸</li></ul><h2 id="皮肤精灵" tabindex="-1"><a class="header-anchor" href="#皮肤精灵"><span>皮肤精灵</span></a></h2><p>一般情况下，引擎无法访问玩家选择的皮肤中的任何精灵。为了使用一个精灵，引擎必须通过引用它的名字来声明它。</p><p>皮肤精灵的名字只是一个字符串，并且每个皮肤都应该包含已知名字的标准精灵。这些标准精灵允许皮肤被用在多种引擎中，并且引擎应该在期望的自定义精灵不存在时，使用标准精灵进行渲染。</p><h2 id="声明" tabindex="-1"><a class="header-anchor" href="#声明"><span>声明</span></a></h2><p>我们的舞台非常简单: 只有一条判定线。由于我们并不使用自定义精灵，因此我们应使用标准判定线精灵:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/skins.cpp"><span>/engine/skins.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Sprites</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">int</span> judgeLine <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span>Sprites<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">auto</span> skins <span class="token operator">=</span> defineSkins<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Sprites</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span> SkinSpriteName<span class="token punctuation">.</span>JudgmentLine<span class="token punctuation">,</span> Sprites<span class="token punctuation">.</span>judgeLine <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>保存后，在 <code>/skins/</code> 中放入对应的精灵图片，并将其命名为 <code>#JUDGMENT_LINE.png</code>，这样在编译引擎时，Sonolus.h 会自动将判定线图片打包成皮肤上传至服务器。</p><h2 id="绘制" tabindex="-1"><a class="header-anchor" href="#绘制"><span>绘制</span></a></h2><p>在绘制前，让我们先初始化一个 <code>Stage</code> 原型:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Initialization.cpp"><span>/engine/play/Initialization.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Stage</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span><span class="token operator">:</span></span>
<span class="line"></span>
<span class="line">    string name <span class="token operator">=</span> <span class="token string">&quot;My Stage&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/engine.cpp"><span>/engine/engine.cpp</span></div><div class="language-diff line-numbers-mode" data-highlighter="prismjs" data-ext="diff"><pre><code><span class="line">// ...</span>
<span class="line"></span>
<span class="line">#ifdef play</span>
<span class="line">using namespace playData;</span>
<span class="line">#include&quot;play/Initialization.cpp&quot;</span>
<span class="line"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> #include&quot;play/Stage.cpp&quot;</span>
<span class="line"></span></span>#elif tutorial</span>
<span class="line"></span>
<span class="line">// ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/main.cpp"><span>/main.cpp</span></div><div class="language-diff line-numbers-mode" data-highlighter="prismjs" data-ext="diff"><pre><code><span class="line">// ...</span>
<span class="line"></span>
<span class="line">#ifdef play</span>
<span class="line"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   buffer data, configuration;</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">   build&lt;</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">       // Replace with your archetypes here</span>
<span class="line"></span><span class="token prefix unchanged"> </span><span class="token line">       Initialization,</span>
<span class="line"></span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       Stage</span>
<span class="line"></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &gt;(configuration, data);</span>
<span class="line"></span></span></span>
<span class="line">// ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>让我们定义，我们设想的判定线的宽度只有音符半径的 1 / 4，其绘制非常简单:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Stage.cpp"><span>/engine/play/Stage.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Stage</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">updateParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        let l <span class="token operator">=</span> judgeLine<span class="token punctuation">.</span>l<span class="token punctuation">;</span></span>
<span class="line">        let r <span class="token operator">=</span> judgeLine<span class="token punctuation">.</span>r<span class="token punctuation">;</span></span>
<span class="line">        let t <span class="token operator">=</span> judgeLine<span class="token punctuation">.</span>y <span class="token operator">+</span> note<span class="token punctuation">.</span>radius <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line">        let b <span class="token operator">=</span> judgeLine<span class="token punctuation">.</span>y <span class="token operator">-</span> note<span class="token punctuation">.</span>radius <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">Draw</span><span class="token punctuation">(</span>Sprites<span class="token punctuation">.</span>judgeLine<span class="token punctuation">,</span> l<span class="token punctuation">,</span> b<span class="token punctuation">,</span> l<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="响应触摸" tabindex="-1"><a class="header-anchor" href="#响应触摸"><span>响应触摸</span></a></h2><p>让我们改进我们的判定线，使其能够响应我们的触摸:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="/engine/play/Stage.cpp"><span>/engine/play/Stage.cpp</span></div><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Stage</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Archetype</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    SonolusApi <span class="token function">updateParallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        FUNCBEGIN</span>
<span class="line">        <span class="token comment">// ...</span></span>
<span class="line">        </span>
<span class="line">        <span class="token function">Draw</span><span class="token punctuation">(</span>Sprites<span class="token punctuation">.</span>judgeLine<span class="token punctuation">,</span> l<span class="token punctuation">,</span> b<span class="token punctuation">,</span> l<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> t<span class="token punctuation">,</span> r<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">If</span><span class="token punctuation">(</span>touches<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> VOID<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,20)]))}const o=s(l,[["render",i]]),u=JSON.parse('{"path":"/sonolus.h/play/5.%20stage.html","title":"舞台","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1745035621000,"contributors":[{"name":"LittleYang0531","username":"LittleYang0531","email":"“littleyang0531@outlook.com”","commits":5,"url":"https://github.com/LittleYang0531"}],"changelog":[{"hash":"570216e19854d31872ac0be244ab299f8df2a983","time":1745035621000,"email":"littleyang0531@cau.edu.cn","author":"LittleYang0531","message":"Update"},{"hash":"307d2a220f7bba82bd2e711c214715b8253a1908","time":1720416884000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Add tutorial 01"},{"hash":"7f13429673ffc5b1dca011868f671ca020b42e65","time":1720364737000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"},{"hash":"132936bd91a9dc146e5935cb598d680e28d5f145","time":1720278408000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"},{"hash":"cc2e831f83e429abdc0d43fd00810736a8e7e3d3","time":1720190162000,"email":"“littleyang0531@outlook.com”","author":"LittleYang0531","message":"Update"}]},"filePathRelative":"sonolus.h/play/5. stage.md"}');export{o as comp,u as data};
